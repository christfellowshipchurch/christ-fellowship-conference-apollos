"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.followingsSchema = exports.liveSchema = exports.familySchema = exports.contentSharableSchema = exports.contentChannelSchema = exports.contentItemSchema = exports.analyticsSchema = exports.scriptureSchema = exports.themeSchema = exports.mediaSchema = exports.peopleSchema = exports.authSchema = exports.testSchema = void 0;

var _graphqlTag = _interopRequireDefault(require("graphql-tag"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const testSchema = _graphqlTag.default`
  scalar Upload
`;
exports.testSchema = testSchema;
const authSchema = _graphqlTag.default`
  type AuthenticatedUser {
    id: ID!
    profile: Person
  }

  type Authentication {
    user: AuthenticatedUser
    token: String
  }

  extend type Mutation {
    authenticate(identity: String!, password: String!): Authentication
    changePassword(password: String!): Authentication
    registerPerson(email: String!, password: String!): Authentication
  }

  extend type Query {
    currentUser: AuthenticatedUser
  }
`;
exports.authSchema = authSchema;
const peopleSchema = _graphqlTag.default`
  enum UPDATEABLE_PROFILE_FIELDS {
    FirstName
    LastName
    Email
    NickName
  }

  input UpdateProfileInput {
    field: UPDATEABLE_PROFILE_FIELDS!
    value: String!
  }

  type Person implements Node {
    id: ID!
    firstName: String!
    lastName: String!
    nickName: String
    email: String
    photo: ImageMediaSource
  }

  extend type Mutation {
    updateProfileField(input: UpdateProfileInput!): Person
    updateProfileFields(input: [UpdateProfileInput]!): Person
    uploadProfileImage(file: Upload!, size: Int!): Person
  }

  extend type Query {
    people(email: String!): [Person]
  }
`;
exports.peopleSchema = peopleSchema;
const mediaSchema = _graphqlTag.default`
  interface Media {
    name: String
    key: String
    sources: [MediaSource]
  }

  interface MediaSource {
    uri: String
  }

  type ImageMedia implements Media {
    name: String
    key: String
    sources: [ImageMediaSource]
  }

  type VideoMedia implements Media {
    name: String
    key: String
    sources: [VideoMediaSource]
    # duration: Float
    embedHtml: String
  }

  type AudioMedia implements Media {
    name: String
    key: String
    # duration: Float
    sources: [AudioMediaSource]
  }

  type AudioMediaSource implements MediaSource {
    uri: String
    # format: String
    # size: String
  }

  type ImageMediaSource implements MediaSource {
    uri: String
    # width: Int
    # height: Int
  }

  type VideoMediaSource implements MediaSource {
    uri: String
    # format: String
    # size: String
  }

  enum MediaInputType {
    IMAGE
    VIDEO
    AUDIO
  }
`;
exports.mediaSchema = mediaSchema;
const themeSchema = _graphqlTag.default`
  type Theme {
    type: ThemeType
    colors: ThemeColors
  }

  enum ThemeType {
    LIGHT
    DARK
  }

  scalar Color

  type ThemeColors {
    primary: Color
    secondary: Color
    screen: Color
    paper: Color
    alert: Color
  }
`;
exports.themeSchema = themeSchema;
const scriptureSchema = _graphqlTag.default`
  type Scripture {
    id: String
    html: String
    reference: String
    copyright: String
  }

  extend type Query {
    scripture(query: String!): Scripture
  }
`;
exports.scriptureSchema = scriptureSchema;
const analyticsSchema = _graphqlTag.default`
  # Not supported right now...
  # union AnalyticsValue = String | Float | Boolean | Int
  scalar AnalyticsValue

  input AnalyticsMetaField {
    field: String!
    value: AnalyticsValue
  }

  enum AnalyticsPlatform {
    iOS
    Android
  }

  input AnalyticsDeviceInfo {
    platform: AnalyticsPlatform
    deviceId: String
    deviceModel: String
    osVersion: String
    appVersion: String
  }

  input AnalyticsIdentifyInput {
    traits: [AnalyticsMetaField]
    anonymousId: String!
    deviceInfo: AnalyticsDeviceInfo
  }

  input AnalyticsTrackInput {
    eventName: String!
    properties: [AnalyticsMetaField]
    anonymousId: String
    deviceInfo: AnalyticsDeviceInfo
  }

  type AnalyticsResult {
    success: Boolean
  }

  extend type Mutation {
    identifySelf(input: AnalyticsIdentifyInput!): AnalyticsResult
    trackEvent(input: AnalyticsTrackInput!): AnalyticsResult
  }
`;
exports.analyticsSchema = analyticsSchema;
const contentItemSchema = _graphqlTag.default`
  interface ContentItem {
    id: ID!
    title: String
    coverImage: ImageMedia
    images: [ImageMedia]
    videos: [VideoMedia]
    audios: [AudioMedia]
    htmlContent: String
    summary: String
    childContentItemsConnection(
      first: Int
      after: String
    ): ContentItemsConnection
    siblingContentItemsConnection(
      first: Int
      after: String
    ): ContentItemsConnection
    parentChannel: ContentChannel

    theme: Theme
  }

  type UniversalContentItem implements ContentItem & Node {
    id: ID!
    title: String
    coverImage: ImageMedia
    images: [ImageMedia]
    videos: [VideoMedia]
    audios: [AudioMedia]
    htmlContent: String
    summary: String
    childContentItemsConnection(
      first: Int
      after: String
    ): ContentItemsConnection
    siblingContentItemsConnection(
      first: Int
      after: String
    ): ContentItemsConnection
    parentChannel: ContentChannel
    theme: Theme
  }

  type DevotionalContentItem implements ContentItem & Node {
    id: ID!
    title: String
    coverImage: ImageMedia
    images: [ImageMedia]
    videos: [VideoMedia]
    audios: [AudioMedia]
    htmlContent: String
    summary: String
    childContentItemsConnection(
      first: Int
      after: String
    ): ContentItemsConnection
    siblingContentItemsConnection(
      first: Int
      after: String
    ): ContentItemsConnection
    parentChannel: ContentChannel

    theme: Theme
    scriptures: [Scripture]
  }

  type MediaContentItem implements ContentItem & Node {
    id: ID!
    title: String
    coverImage: ImageMedia
    images: [ImageMedia]
    videos: [VideoMedia]
    audios: [AudioMedia]
    htmlContent: String
    summary: String
    childContentItemsConnection(
      first: Int
      after: String
    ): ContentItemsConnection
    siblingContentItemsConnection(
      first: Int
      after: String
    ): ContentItemsConnection
    parentChannel: ContentChannel

    theme: Theme
    scriptures: [Scripture]
  }

  type ContentSeriesContentItem implements ContentItem & Node {
    id: ID!
    title: String
    coverImage: ImageMedia
    images: [ImageMedia]
    videos: [VideoMedia]
    audios: [AudioMedia]
    htmlContent: String
    summary: String
    childContentItemsConnection(
      first: Int
      after: String
    ): ContentItemsConnection
    siblingContentItemsConnection(
      first: Int
      after: String
    ): ContentItemsConnection
    parentChannel: ContentChannel

    theme: Theme
    scriptures: [Scripture]
  }

  input ContentItemsConnectionInput {
    first: Int
    after: String
  }

  type ContentItemsConnection {
    edges: [ContentItemsConnectionEdge]
    # TODO totalCount: Int
    pageInfo: PaginationInfo
  }

  type ContentItemsConnectionEdge {
    node: ContentItem
    cursor: String
  }

  extend type Query {
    userFeed(first: Int, after: String): ContentItemsConnection
  }
`;
exports.contentItemSchema = contentItemSchema;
const contentChannelSchema = _graphqlTag.default`
  type ContentChannel implements Node {
    id: ID!
    name: String!
    description: String

    childContentChannels: [ContentChannel]
    childContentItemsConnection(
      first: Int
      after: String
    ): ContentItemsConnection

    iconName: String
  }

  extend type Query {
    contentChannels: [ContentChannel]
  }
`;
exports.contentChannelSchema = contentChannelSchema;
const contentSharableSchema = _graphqlTag.default`
  interface Sharable {
    url: String
    message: String
    title: String
  }

  type SharableContentItem implements Sharable {
    url: String
    message: String
    title: String
  }

  extend interface ContentItem {
    sharing: SharableContentItem
  }

  extend type DevotionalContentItem {
    sharing: SharableContentItem
  }

  extend type UniversalContentItem {
    sharing: SharableContentItem
  }

  extend type MediaContentItem {
    sharing: SharableContentItem
  }

  extend type ContentSeriesContentItem {
    sharing: SharableContentItem
  }
`;
exports.contentSharableSchema = contentSharableSchema;
const familySchema = _graphqlTag.default`
  extend type Person {
    location: String
  }
`;
exports.familySchema = familySchema;
const liveSchema = _graphqlTag.default`
  type LiveStream {
    isLive: Boolean
    eventStartTime: String
  }

  extend type Query {
    liveStream: LiveStream
  }
`;
exports.liveSchema = liveSchema;
const followingsSchema = _graphqlTag.default`
  enum LIKE_OPERATION {
    Like
    Unlike
  }

  input LikeEntityInput {
    nodeId: ID!
    operation: LIKE_OPERATION!
  }

  extend type Mutation {
    updateLikeEntity(input: LikeEntityInput!): ContentItem
  }

  extend interface ContentItem {
    isLiked: Boolean
    likedCount: Int
  }

  extend type DevotionalContentItem {
    isLiked: Boolean
    likedCount: Int
  }

  extend type UniversalContentItem {
    isLiked: Boolean
    likedCount: Int
  }

  extend type MediaContentItem {
    isLiked: Boolean
    likedCount: Int
  }

  extend type ContentSeriesContentItem {
    isLiked: Boolean
    likedCount: Int
  }

  extend type Query {
    getAllLikedContent: [ContentItem]
  }
`;
exports.followingsSchema = followingsSchema;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
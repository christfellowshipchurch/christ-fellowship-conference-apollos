"use strict";

var _graphql = require("graphql");

var _apolloServerEnv = require("apollo-server-env");

var _serverCore = require("@apollosproject/server-core");

var _testUtils = require("@apollosproject/server-core/lib/testUtils");

var _config = _interopRequireDefault(require("@apollosproject/config"));

var _dataSchema = require("@apollosproject/data-schema");

var _ = require("../..");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// we import the root-level schema and resolver so we test the entire integration:
const {
  getContext,
  getSchema
} = (0, _testUtils.createTestHelpers)({
  ContentChannel: _.ContentChannel,
  ContentItem: _.ContentItem,
  Sharable: _.Sharable
});

_config.default.loadJs({
  ROCK: {
    API_URL: 'https://apollosrock.newspring.cc/api',
    API_TOKEN: 'some-rock-token',
    IMAGE_URL: 'https://apollosrock.newspring.cc/GetImage.ashx'
  },
  ROCK_MAPPINGS: {
    SERIES_CONTENT_CHANNEL_TYPE_IDS: [6, 7],
    DISCOVER_CONTENT_CHANNEL_IDS: [2, 3, 4, 6, 8]
  }
});

const contentChannelFragment = `
  fragment ContentChannelFragment on ContentChannel {
    id
    __typename
    name
    description
    childContentChannels {
      id
      __typename
      name
      description
    }
    iconName
    childContentItemsConnection {
      edges {
        cursor
        node {
          id
          __typename
        }
      }
    }
  }
`;
describe('ContentChannel', () => {
  let schema;
  let context;
  beforeEach(() => {
    _apolloServerEnv.fetch.resetMocks();

    _apolloServerEnv.fetch.mockRockDataSourceAPI();

    schema = getSchema([_dataSchema.themeSchema, _dataSchema.mediaSchema, _dataSchema.scriptureSchema]);
    context = getContext();
  });
  it('gets a list of content channels', async () => {
    const query = `
      query {
        contentChannels {
          ...ContentChannelFragment
        }
      }
      ${contentChannelFragment}
    `;
    const rootValue = {};
    const result = await (0, _graphql.graphql)(schema, query, rootValue, context);
    expect(result).toMatchSnapshot();
  });
  it('gets a single content channel when querying by root node', async () => {
    const query = `
      query {
        node(
          id: "${(0, _serverCore.createGlobalId)(1, 'ContentChannel')}"
        ) {
          ...on ContentChannel {
            ...ContentChannelFragment
          }
        }
      }
      ${contentChannelFragment}
    `;
    const rootValue = {};
    const result = await (0, _graphql.graphql)(schema, query, rootValue, context);
    expect(result).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb250ZW50LWNoYW5uZWxzL19fdGVzdHNfXy9yZXNvbHZlcnMudGVzdHMuanMiXSwibmFtZXMiOlsiZ2V0Q29udGV4dCIsImdldFNjaGVtYSIsIkNvbnRlbnRDaGFubmVsIiwiQ29udGVudEl0ZW0iLCJTaGFyYWJsZSIsIkFwb2xsb3NDb25maWciLCJsb2FkSnMiLCJST0NLIiwiQVBJX1VSTCIsIkFQSV9UT0tFTiIsIklNQUdFX1VSTCIsIlJPQ0tfTUFQUElOR1MiLCJTRVJJRVNfQ09OVEVOVF9DSEFOTkVMX1RZUEVfSURTIiwiRElTQ09WRVJfQ09OVEVOVF9DSEFOTkVMX0lEUyIsImNvbnRlbnRDaGFubmVsRnJhZ21lbnQiLCJkZXNjcmliZSIsInNjaGVtYSIsImNvbnRleHQiLCJiZWZvcmVFYWNoIiwiZmV0Y2giLCJyZXNldE1vY2tzIiwibW9ja1JvY2tEYXRhU291cmNlQVBJIiwidGhlbWVTY2hlbWEiLCJtZWRpYVNjaGVtYSIsInNjcmlwdHVyZVNjaGVtYSIsIml0IiwicXVlcnkiLCJyb290VmFsdWUiLCJyZXN1bHQiLCJleHBlY3QiLCJ0b01hdGNoU25hcHNob3QiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBRUE7O0FBT0E7Ozs7QUFEQTtBQUdBLE1BQU07QUFBRUEsRUFBQUEsVUFBRjtBQUFjQyxFQUFBQTtBQUFkLElBQTRCLGtDQUFrQjtBQUNsREMsRUFBQUEsY0FBYyxFQUFkQSxnQkFEa0Q7QUFFbERDLEVBQUFBLFdBQVcsRUFBWEEsYUFGa0Q7QUFHbERDLEVBQUFBLFFBQVEsRUFBUkE7QUFIa0QsQ0FBbEIsQ0FBbEM7O0FBTUFDLGdCQUFjQyxNQUFkLENBQXFCO0FBQ25CQyxFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsT0FBTyxFQUFFLHNDQURMO0FBRUpDLElBQUFBLFNBQVMsRUFBRSxpQkFGUDtBQUdKQyxJQUFBQSxTQUFTLEVBQUU7QUFIUCxHQURhO0FBTW5CQyxFQUFBQSxhQUFhLEVBQUU7QUFDYkMsSUFBQUEsK0JBQStCLEVBQUUsQ0FBQyxDQUFELEVBQUksQ0FBSixDQURwQjtBQUViQyxJQUFBQSw0QkFBNEIsRUFBRSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsRUFBYSxDQUFiO0FBRmpCO0FBTkksQ0FBckI7O0FBWUEsTUFBTUMsc0JBQXNCLEdBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBQWhDO0FBeUJBQyxRQUFRLENBQUMsZ0JBQUQsRUFBbUIsTUFBTTtBQUMvQixNQUFJQyxNQUFKO0FBQ0EsTUFBSUMsT0FBSjtBQUNBQyxFQUFBQSxVQUFVLENBQUMsTUFBTTtBQUNmQywyQkFBTUMsVUFBTjs7QUFDQUQsMkJBQU1FLHFCQUFOOztBQUNBTCxJQUFBQSxNQUFNLEdBQUdmLFNBQVMsQ0FBQyxDQUFDcUIsdUJBQUQsRUFBY0MsdUJBQWQsRUFBMkJDLDJCQUEzQixDQUFELENBQWxCO0FBQ0FQLElBQUFBLE9BQU8sR0FBR2pCLFVBQVUsRUFBcEI7QUFDRCxHQUxTLENBQVY7QUFPQXlCLEVBQUFBLEVBQUUsQ0FBQyxpQ0FBRCxFQUFvQyxZQUFZO0FBQ2hELFVBQU1DLEtBQUssR0FBSTs7Ozs7O1FBTVhaLHNCQUF1QjtLQU4zQjtBQVFBLFVBQU1hLFNBQVMsR0FBRyxFQUFsQjtBQUNBLFVBQU1DLE1BQU0sR0FBRyxNQUFNLHNCQUFRWixNQUFSLEVBQWdCVSxLQUFoQixFQUF1QkMsU0FBdkIsRUFBa0NWLE9BQWxDLENBQXJCO0FBQ0FZLElBQUFBLE1BQU0sQ0FBQ0QsTUFBRCxDQUFOLENBQWVFLGVBQWY7QUFDRCxHQVpDLENBQUY7QUFjQUwsRUFBQUEsRUFBRSxDQUFDLDBEQUFELEVBQTZELFlBQVk7QUFDekUsVUFBTUMsS0FBSyxHQUFJOzs7aUJBR0YsZ0NBQWUsQ0FBZixFQUFrQixnQkFBbEIsQ0FBb0M7Ozs7Ozs7UUFPN0NaLHNCQUF1QjtLQVYzQjtBQVlBLFVBQU1hLFNBQVMsR0FBRyxFQUFsQjtBQUNBLFVBQU1DLE1BQU0sR0FBRyxNQUFNLHNCQUFRWixNQUFSLEVBQWdCVSxLQUFoQixFQUF1QkMsU0FBdkIsRUFBa0NWLE9BQWxDLENBQXJCO0FBQ0FZLElBQUFBLE1BQU0sQ0FBQ0QsTUFBRCxDQUFOLENBQWVFLGVBQWY7QUFDRCxHQWhCQyxDQUFGO0FBaUJELENBekNPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBncmFwaHFsIH0gZnJvbSAnZ3JhcGhxbCc7XG5pbXBvcnQgeyBmZXRjaCB9IGZyb20gJ2Fwb2xsby1zZXJ2ZXItZW52JztcbmltcG9ydCB7IGNyZWF0ZUdsb2JhbElkIH0gZnJvbSAnQGFwb2xsb3Nwcm9qZWN0L3NlcnZlci1jb3JlJztcblxuaW1wb3J0IHsgY3JlYXRlVGVzdEhlbHBlcnMgfSBmcm9tICdAYXBvbGxvc3Byb2plY3Qvc2VydmVyLWNvcmUvbGliL3Rlc3RVdGlscyc7XG5pbXBvcnQgQXBvbGxvc0NvbmZpZyBmcm9tICdAYXBvbGxvc3Byb2plY3QvY29uZmlnJztcblxuaW1wb3J0IHtcbiAgbWVkaWFTY2hlbWEsXG4gIHRoZW1lU2NoZW1hLFxuICBzY3JpcHR1cmVTY2hlbWEsXG59IGZyb20gJ0BhcG9sbG9zcHJvamVjdC9kYXRhLXNjaGVtYSc7XG5cbi8vIHdlIGltcG9ydCB0aGUgcm9vdC1sZXZlbCBzY2hlbWEgYW5kIHJlc29sdmVyIHNvIHdlIHRlc3QgdGhlIGVudGlyZSBpbnRlZ3JhdGlvbjpcbmltcG9ydCB7IENvbnRlbnRDaGFubmVsLCBDb250ZW50SXRlbSwgU2hhcmFibGUgfSBmcm9tICcuLi8uLic7XG5cbmNvbnN0IHsgZ2V0Q29udGV4dCwgZ2V0U2NoZW1hIH0gPSBjcmVhdGVUZXN0SGVscGVycyh7XG4gIENvbnRlbnRDaGFubmVsLFxuICBDb250ZW50SXRlbSxcbiAgU2hhcmFibGUsXG59KTtcblxuQXBvbGxvc0NvbmZpZy5sb2FkSnMoe1xuICBST0NLOiB7XG4gICAgQVBJX1VSTDogJ2h0dHBzOi8vYXBvbGxvc3JvY2submV3c3ByaW5nLmNjL2FwaScsXG4gICAgQVBJX1RPS0VOOiAnc29tZS1yb2NrLXRva2VuJyxcbiAgICBJTUFHRV9VUkw6ICdodHRwczovL2Fwb2xsb3Nyb2NrLm5ld3NwcmluZy5jYy9HZXRJbWFnZS5hc2h4JyxcbiAgfSxcbiAgUk9DS19NQVBQSU5HUzoge1xuICAgIFNFUklFU19DT05URU5UX0NIQU5ORUxfVFlQRV9JRFM6IFs2LCA3XSxcbiAgICBESVNDT1ZFUl9DT05URU5UX0NIQU5ORUxfSURTOiBbMiwgMywgNCwgNiwgOF0sXG4gIH0sXG59KTtcblxuY29uc3QgY29udGVudENoYW5uZWxGcmFnbWVudCA9IGBcbiAgZnJhZ21lbnQgQ29udGVudENoYW5uZWxGcmFnbWVudCBvbiBDb250ZW50Q2hhbm5lbCB7XG4gICAgaWRcbiAgICBfX3R5cGVuYW1lXG4gICAgbmFtZVxuICAgIGRlc2NyaXB0aW9uXG4gICAgY2hpbGRDb250ZW50Q2hhbm5lbHMge1xuICAgICAgaWRcbiAgICAgIF9fdHlwZW5hbWVcbiAgICAgIG5hbWVcbiAgICAgIGRlc2NyaXB0aW9uXG4gICAgfVxuICAgIGljb25OYW1lXG4gICAgY2hpbGRDb250ZW50SXRlbXNDb25uZWN0aW9uIHtcbiAgICAgIGVkZ2VzIHtcbiAgICAgICAgY3Vyc29yXG4gICAgICAgIG5vZGUge1xuICAgICAgICAgIGlkXG4gICAgICAgICAgX190eXBlbmFtZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5gO1xuXG5kZXNjcmliZSgnQ29udGVudENoYW5uZWwnLCAoKSA9PiB7XG4gIGxldCBzY2hlbWE7XG4gIGxldCBjb250ZXh0O1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBmZXRjaC5yZXNldE1vY2tzKCk7XG4gICAgZmV0Y2gubW9ja1JvY2tEYXRhU291cmNlQVBJKCk7XG4gICAgc2NoZW1hID0gZ2V0U2NoZW1hKFt0aGVtZVNjaGVtYSwgbWVkaWFTY2hlbWEsIHNjcmlwdHVyZVNjaGVtYV0pO1xuICAgIGNvbnRleHQgPSBnZXRDb250ZXh0KCk7XG4gIH0pO1xuXG4gIGl0KCdnZXRzIGEgbGlzdCBvZiBjb250ZW50IGNoYW5uZWxzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHF1ZXJ5ID0gYFxuICAgICAgcXVlcnkge1xuICAgICAgICBjb250ZW50Q2hhbm5lbHMge1xuICAgICAgICAgIC4uLkNvbnRlbnRDaGFubmVsRnJhZ21lbnRcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgJHtjb250ZW50Q2hhbm5lbEZyYWdtZW50fVxuICAgIGA7XG4gICAgY29uc3Qgcm9vdFZhbHVlID0ge307XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ3JhcGhxbChzY2hlbWEsIHF1ZXJ5LCByb290VmFsdWUsIGNvbnRleHQpO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICB9KTtcblxuICBpdCgnZ2V0cyBhIHNpbmdsZSBjb250ZW50IGNoYW5uZWwgd2hlbiBxdWVyeWluZyBieSByb290IG5vZGUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcXVlcnkgPSBgXG4gICAgICBxdWVyeSB7XG4gICAgICAgIG5vZGUoXG4gICAgICAgICAgaWQ6IFwiJHtjcmVhdGVHbG9iYWxJZCgxLCAnQ29udGVudENoYW5uZWwnKX1cIlxuICAgICAgICApIHtcbiAgICAgICAgICAuLi5vbiBDb250ZW50Q2hhbm5lbCB7XG4gICAgICAgICAgICAuLi5Db250ZW50Q2hhbm5lbEZyYWdtZW50XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAke2NvbnRlbnRDaGFubmVsRnJhZ21lbnR9XG4gICAgYDtcbiAgICBjb25zdCByb290VmFsdWUgPSB7fTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBncmFwaHFsKHNjaGVtYSwgcXVlcnksIHJvb3RWYWx1ZSwgY29udGV4dCk7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9NYXRjaFNuYXBzaG90KCk7XG4gIH0pO1xufSk7XG4iXX0=
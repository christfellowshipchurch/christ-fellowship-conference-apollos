"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rockApolloDataSource = _interopRequireDefault(require("@apollosproject/rock-apollo-data-source"));

var _config = _interopRequireDefault(require("@apollosproject/config"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const {
  ROCK_MAPPINGS
} = _config.default;

class ContentItem extends _rockApolloDataSource.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "resource", 'ContentChannelItems');

    _defineProperty(this, "expanded", true);

    _defineProperty(this, "getCursorByParentContentItemId", async id => {
      const associations = await this.request('ContentChannelItemAssociations').filter(`ContentChannelItemId eq ${id}`).get();
      if (!associations || !associations.length) return null;
      const request = this.request();
      associations.forEach(({
        childContentChannelItemId
      }) => {
        request.filter(`Id eq ${childContentChannelItemId}`);
      });
      return request.orderBy('Order');
    });

    _defineProperty(this, "getCursorByChildContentItemId", async id => {
      const associations = await this.request('ContentChannelItemAssociations').filter(`ChildContentChannelItemId eq ${id}`).get();
      if (!associations || !associations.length) return null;
      const request = this.request();
      associations.forEach(({
        contentChannelItemId
      }) => {
        request.filter(`Id eq ${contentChannelItemId}`);
      });
      return request.orderBy('Order');
    });

    _defineProperty(this, "getCursorBySiblingContentItemId", async id => {
      // Get all parents for the current item.
      const parentAssociations = await this.request('ContentChannelItemAssociations').filter(`ChildContentChannelItemId eq ${id}`).get();
      if (!parentAssociations || !parentAssociations.length) return null; // Now, fetch all children relations for those parents (excluding the original item)

      const siblingAssociationsRequest = await this.request('ContentChannelItemAssociations');
      parentAssociations.forEach(({
        contentChannelItemId
      }) => {
        siblingAssociationsRequest.filter(`(ContentChannelItemId eq ${contentChannelItemId}) and (ChildContentChannelItemId ne ${id})`);
      });
      const siblingAssociations = await siblingAssociationsRequest.get();
      if (!siblingAssociations || !siblingAssociations.length) return null;
      const request = this.request();
      siblingAssociations.forEach(({
        childContentChannelItemId
      }) => {
        request.filter(`Id eq ${childContentChannelItemId}`);
      });
      return request.orderBy('Order');
    });

    _defineProperty(this, "byUserFeed", () => this.request().filter(ROCK_MAPPINGS.FEED_CONTENT_CHANNEL_IDS.map(id => `(ContentChannelId eq ${id})`).join(' or ')).orderBy('StartDateTime', 'desc'));

    _defineProperty(this, "byContentChannelId", id => this.request().filter(`ContentChannelId eq ${id}`).orderBy('StartDateTime', 'desc'));

    _defineProperty(this, "getFromIds", ids => {
      const filter = ids.map(id => `(Id eq ${id})`).join(' or ');
      return this.request().filter(filter);
    });

    _defineProperty(this, "getFromId", id => this.request().find(id).get());
  }

}

exports.default = ContentItem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250ZW50LWl0ZW1zL2RhdGEtc291cmNlLmpzIl0sIm5hbWVzIjpbIlJPQ0tfTUFQUElOR1MiLCJBcG9sbG9zQ29uZmlnIiwiQ29udGVudEl0ZW0iLCJSb2NrQXBvbGxvRGF0YVNvdXJjZSIsImlkIiwiYXNzb2NpYXRpb25zIiwicmVxdWVzdCIsImZpbHRlciIsImdldCIsImxlbmd0aCIsImZvckVhY2giLCJjaGlsZENvbnRlbnRDaGFubmVsSXRlbUlkIiwib3JkZXJCeSIsImNvbnRlbnRDaGFubmVsSXRlbUlkIiwicGFyZW50QXNzb2NpYXRpb25zIiwic2libGluZ0Fzc29jaWF0aW9uc1JlcXVlc3QiLCJzaWJsaW5nQXNzb2NpYXRpb25zIiwiRkVFRF9DT05URU5UX0NIQU5ORUxfSURTIiwibWFwIiwiam9pbiIsImlkcyIsImZpbmQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7Ozs7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQW9CQyxlQUExQjs7QUFFZSxNQUFNQyxXQUFOLFNBQTBCQyw2QkFBMUIsQ0FBK0M7QUFBQTtBQUFBOztBQUFBLHNDQUNqRCxxQkFEaUQ7O0FBQUEsc0NBR2pELElBSGlEOztBQUFBLDREQUszQixNQUFPQyxFQUFQLElBQWM7QUFDN0MsWUFBTUMsWUFBWSxHQUFHLE1BQU0sS0FBS0MsT0FBTCxDQUFhLGdDQUFiLEVBQ3hCQyxNQUR3QixDQUNoQiwyQkFBMEJILEVBQUcsRUFEYixFQUV4QkksR0FGd0IsRUFBM0I7QUFJQSxVQUFJLENBQUNILFlBQUQsSUFBaUIsQ0FBQ0EsWUFBWSxDQUFDSSxNQUFuQyxFQUEyQyxPQUFPLElBQVA7QUFDM0MsWUFBTUgsT0FBTyxHQUFHLEtBQUtBLE9BQUwsRUFBaEI7QUFDQUQsTUFBQUEsWUFBWSxDQUFDSyxPQUFiLENBQXFCLENBQUM7QUFBRUMsUUFBQUE7QUFBRixPQUFELEtBQW1DO0FBQ3RETCxRQUFBQSxPQUFPLENBQUNDLE1BQVIsQ0FBZ0IsU0FB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LEtBQUtFLE9BQUwsR0FDR2UsSUFESCxDQUNRakIsRUFEUixFQUVHSSxHQUZILEVBbkYwRDtBQUFBOztBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJvY2tBcG9sbG9EYXRhU291cmNlIGZyb20gJ0BhcG9sbG9zcHJvamVjdC9yb2NrLWFwb2xsby1kYXRhLXNvdXJjZSc7XG5pbXBvcnQgQXBvbGxvc0NvbmZpZyBmcm9tICdAYXBvbGxvc3Byb2plY3QvY29uZmlnJztcblxuY29uc3QgeyBST0NLX01BUFBJTkdTIH0gPSBBcG9sbG9zQ29uZmlnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250ZW50SXRlbSBleHRlbmRzIFJvY2tBcG9sbG9EYXRhU291cmNlIHtcbiAgcmVzb3VyY2UgPSAnQ29udGVudENoYW5uZWxJdGVtcyc7XG5cbiAgZXhwYW5kZWQgPSB0cnVlO1xuXG4gIGdldEN1cnNvckJ5UGFyZW50Q29udGVudEl0ZW1JZCA9IGFzeW5jIChpZCkgPT4ge1xuICAgIGNvbnN0IGFzc29jaWF0aW9ucyA9IGF3YWl0IHRoaXMucmVxdWVzdCgnQ29udGVudENoYW5uZWxJdGVtQXNzb2NpYXRpb25zJylcbiAgICAgIC5maWx0ZXIoYENvbnRlbnRDaGFubmVsSXRlbUlkIGVxICR7aWR9YClcbiAgICAgIC5nZXQoKTtcblxuICAgIGlmICghYXNzb2NpYXRpb25zIHx8ICFhc3NvY2lhdGlvbnMubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5yZXF1ZXN0KCk7XG4gICAgYXNzb2NpYXRpb25zLmZvckVhY2goKHsgY2hpbGRDb250ZW50Q2hhbm5lbEl0ZW1JZCB9KSA9PiB7XG4gICAgICByZXF1ZXN0LmZpbHRlcihgSWQgZXEgJHtjaGlsZENvbnRlbnRDaGFubmVsSXRlbUlkfWApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlcXVlc3Qub3JkZXJCeSgnT3JkZXInKTtcbiAgfTtcblxuICBnZXRDdXJzb3JCeUNoaWxkQ29udGVudEl0ZW1JZCA9IGFzeW5jIChpZCkgPT4ge1xuICAgIGNvbnN0IGFzc29jaWF0aW9ucyA9IGF3YWl0IHRoaXMucmVxdWVzdCgnQ29udGVudENoYW5uZWxJdGVtQXNzb2NpYXRpb25zJylcbiAgICAgIC5maWx0ZXIoYENoaWxkQ29udGVudENoYW5uZWxJdGVtSWQgZXEgJHtpZH1gKVxuICAgICAgLmdldCgpO1xuXG4gICAgaWYgKCFhc3NvY2lhdGlvbnMgfHwgIWFzc29jaWF0aW9ucy5sZW5ndGgpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLnJlcXVlc3QoKTtcbiAgICBhc3NvY2lhdGlvbnMuZm9yRWFjaCgoeyBjb250ZW50Q2hhbm5lbEl0ZW1JZCB9KSA9PiB7XG4gICAgICByZXF1ZXN0LmZpbHRlcihgSWQgZXEgJHtjb250ZW50Q2hhbm5lbEl0ZW1JZH1gKTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXF1ZXN0Lm9yZGVyQnkoJ09yZGVyJyk7XG4gIH07XG5cbiAgZ2V0Q3Vyc29yQnlTaWJsaW5nQ29udGVudEl0ZW1JZCA9IGFzeW5jIChpZCkgPT4ge1xuICAgIC8vIEdldCBhbGwgcGFyZW50cyBmb3IgdGhlIGN1cnJlbnQgaXRlbS5cbiAgICBjb25zdCBwYXJlbnRBc3NvY2lhdGlvbnMgPSBhd2FpdCB0aGlzLnJlcXVlc3QoXG4gICAgICAnQ29udGVudENoYW5uZWxJdGVtQXNzb2NpYXRpb25zJ1xuICAgIClcbiAgICAgIC5maWx0ZXIoYENoaWxkQ29udGVudENoYW5uZWxJdGVtSWQgZXEgJHtpZH1gKVxuICAgICAgLmdldCgpO1xuXG4gICAgaWYgKCFwYXJlbnRBc3NvY2lhdGlvbnMgfHwgIXBhcmVudEFzc29jaWF0aW9ucy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gICAgLy8gTm93LCBmZXRjaCBhbGwgY2hpbGRyZW4gcmVsYXRpb25zIGZvciB0aG9zZSBwYXJlbnRzIChleGNsdWRpbmcgdGhlIG9yaWdpbmFsIGl0ZW0pXG4gICAgY29uc3Qgc2libGluZ0Fzc29jaWF0aW9uc1JlcXVlc3QgPSBhd2FpdCB0aGlzLnJlcXVlc3QoXG4gICAgICAnQ29udGVudENoYW5uZWxJdGVtQXNzb2NpYXRpb25zJ1xuICAgICk7XG4gICAgcGFyZW50QXNzb2NpYXRpb25zLmZvckVhY2goKHsgY29udGVudENoYW5uZWxJdGVtSWQgfSkgPT4ge1xuICAgICAgc2libGluZ0Fzc29jaWF0aW9uc1JlcXVlc3QuZmlsdGVyKFxuICAgICAgICBgKENvbnRlbnRDaGFubmVsSXRlbUlkIGVxICR7Y29udGVudENoYW5uZWxJdGVtSWR9KSBhbmQgKENoaWxkQ29udGVudENoYW5uZWxJdGVtSWQgbmUgJHtpZH0pYFxuICAgICAgKTtcbiAgICB9KTtcbiAgICBjb25zdCBzaWJsaW5nQXNzb2NpYXRpb25zID0gYXdhaXQgc2libGluZ0Fzc29jaWF0aW9uc1JlcXVlc3QuZ2V0KCk7XG4gICAgaWYgKCFzaWJsaW5nQXNzb2NpYXRpb25zIHx8ICFzaWJsaW5nQXNzb2NpYXRpb25zLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cbiAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5yZXF1ZXN0KCk7XG4gICAgc2libGluZ0Fzc29jaWF0aW9ucy5mb3JFYWNoKCh7IGNoaWxkQ29udGVudENoYW5uZWxJdGVtSWQgfSkgPT4ge1xuICAgICAgcmVxdWVzdC5maWx0ZXIoYElkIGVxICR7Y2hpbGRDb250ZW50Q2hhbm5lbEl0ZW1JZH1gKTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXF1ZXN0Lm9yZGVyQnkoJ09yZGVyJyk7XG4gIH07XG5cbiAgYnlVc2VyRmVlZCA9ICgpID0+XG4gICAgdGhpcy5yZXF1ZXN0KClcbiAgICAgIC5maWx0ZXIoXG4gICAgICAgIFJPQ0tfTUFQUElOR1MuRkVFRF9DT05URU5UX0NIQU5ORUxfSURTLm1hcChcbiAgICAgICAgICAoaWQpID0+IGAoQ29udGVudENoYW5uZWxJZCBlcSAke2lkfSlgXG4gICAgICAgICkuam9pbignIG9yICcpXG4gICAgICApXG4gICAgICAub3JkZXJCeSgnU3RhcnREYXRlVGltZScsICdkZXNjJyk7XG5cbiAgYnlDb250ZW50Q2hhbm5lbElkID0gKGlkKSA9PlxuICAgIHRoaXMucmVxdWVzdCgpXG4gICAgICAuZmlsdGVyKGBDb250ZW50Q2hhbm5lbElkIGVxICR7aWR9YClcbiAgICAgIC5vcmRlckJ5KCdTdGFydERhdGVUaW1lJywgJ2Rlc2MnKTtcblxuICBnZXRGcm9tSWRzID0gKGlkcykgPT4ge1xuICAgIGNvbnN0IGZpbHRlciA9IGlkcy5tYXAoKGlkKSA9PiBgKElkIGVxICR7aWR9KWApLmpvaW4oJyBvciAnKTtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCkuZmlsdGVyKGZpbHRlcik7XG4gIH07XG5cbiAgZ2V0RnJvbUlkID0gKGlkKSA9PlxuICAgIHRoaXMucmVxdWVzdCgpXG4gICAgICAuZmluZChpZClcbiAgICAgIC5nZXQoKTtcbn1cbiJdfQ==
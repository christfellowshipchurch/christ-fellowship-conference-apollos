"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _withQuery = _interopRequireDefault(require("with-query"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Simple request builder for querying the Rock API.
// Would probably work against most OData APIs, but built to just
// tackle the specific needs of Apollos on top of Rock.
class RockRequestBuilder {
  constructor({
    connector,
    resource,
    defaultOptions = null
  }) {
    _defineProperty(this, "query", {});

    _defineProperty(this, "transforms", []);

    _defineProperty(this, "options", {});

    _defineProperty(this, "get", ({
      options = {},
      body = {}
    } = {}) => this.connector.get(this.path, body, { ...options,
      ...this.options
    }).then(results => {
      if (this.transforms.length) return this.transforms.reduce((current, transformer) => transformer(current), results);
      return results;
    }));

    _defineProperty(this, "find", id => {
      this.resourceId = id;
      return this;
    });

    _defineProperty(this, "filter", filter => {
      const key = '$filter';

      if (this.query[key]) {
        this.query[key] = `(${this.query[key]}) or (${filter})`;
      } else {
        this.query[key] = filter;
      }

      return this;
    });

    _defineProperty(this, "cache", ({
      ttl
    }) => {
      this.options.ttl = ttl;
      return this;
    });

    _defineProperty(this, "expand", expand => {
      let {
        $expand
      } = this.query;

      if (!$expand) {
        $expand = [];
      } else {
        $expand = $expand.split(',');
      }

      $expand.push(expand);
      this.query.$expand = $expand.join(',');
      return this;
    });

    _defineProperty(this, "orderBy", (name, direction = 'asc') => {
      this.query.$orderby = `${name} ${direction}`;
      return this;
    });

    _defineProperty(this, "top", top => {
      this.query.$top = top;
      return this;
    });

    _defineProperty(this, "skip", skip => {
      this.query.$skip = skip;
      return this;
    });

    _defineProperty(this, "select", select => {
      this.query.$select = select;
      return this;
    });

    _defineProperty(this, "transform", func => {
      this.transforms.push(func);
      return this;
    });

    this.connector = connector;
    this.resource = resource;

    if (defaultOptions) {
      this.query = defaultOptions;
    }
  }

  get path() {
    let path = [this.resource];
    if (this.resourceId) path.push(this.resourceId);
    path = path.join('/');
    path = (0, _withQuery.default)(path, this.query);
    return path;
  }
  /**
   * Sends a GET request to the server, resolves with results
   * @returns promise
   */


}

exports.default = RockRequestBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXF1ZXN0LWJ1aWxkZXIuanMiXSwibmFtZXMiOlsiUm9ja1JlcXVlc3RCdWlsZGVyIiwiY29uc3RydWN0b3IiLCJjb25uZWN0b3IiLCJyZXNvdXJjZSIsImRlZmF1bHRPcHRpb25zIiwib3B0aW9ucyIsImJvZHkiLCJnZXQiLCJwYXRoIiwidGhlbiIsInJlc3VsdHMiLCJ0cmFuc2Zvcm1zIiwibGVuZ3RoIiwicmVkdWNlIiwiY3VycmVudCIsInRyYW5zZm9ybWVyIiwiaWQiLCJyZXNvdXJjZUlkIiwiZmlsdGVyIiwia2V5IiwicXVlcnkiLCJ0dGwiLCJleHBhbmQiLCIkZXhwYW5kIiwic3BsaXQiLCJwdXNoIiwiam9pbiIsIm5hbWUiLCJkaXJlY3Rpb24iLCIkb3JkZXJieSIsInRvcCIsIiR0b3AiLCJza2lwIiwiJHNraXAiLCJzZWxlY3QiLCIkc2VsZWN0IiwiZnVuYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFDZSxNQUFNQSxrQkFBTixDQUF5QjtBQUN0Q0MsRUFBQUEsV0FBVyxDQUFDO0FBQUVDLElBQUFBLFNBQUY7QUFBYUMsSUFBQUEsUUFBYjtBQUF1QkMsSUFBQUEsY0FBYyxHQUFHO0FBQXhDLEdBQUQsRUFBaUQ7QUFBQSxtQ0FRcEQsRUFSb0Q7O0FBQUEsd0NBVS9DLEVBVitDOztBQUFBLHFDQVlsRCxFQVprRDs7QUFBQSxpQ0EwQnRELENBQUM7QUFBRUMsTUFBQUEsT0FBTyxHQUFHLEVBQVo7QUFBZ0JDLE1BQUFBLElBQUksR0FBRztBQUF2QixRQUE4QixFQUEvQixLQUNKLEtBQUtKLFNBQUwsQ0FDR0ssR0FESCxDQUNPLEtBQUtDLElBRFosRUFDa0JGLElBRGxCLEVBQ3dCLEVBQUUsR0FBR0QsT0FBTDtBQUFjLFNBQUcsS0FBS0E7QUFBdEIsS0FEeEIsRUFFR0ksSUFGSCxDQUVTQyxPQUFELElBQWE7QUFDakIsVUFBSSxLQUFLQyxVQUFMLENBQWdCQyxNQUFwQixFQUNFLE9BQU8sS0FB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QUFDQSxXQUFPWixJQUFQO0FBQ0Q7QUFFRDs7Ozs7O0FBdkJzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB3aXRoUXVlcnkgZnJvbSAnd2l0aC1xdWVyeSc7XG5cbi8vIFNpbXBsZSByZXF1ZXN0IGJ1aWxkZXIgZm9yIHF1ZXJ5aW5nIHRoZSBSb2NrIEFQSS5cbi8vIFdvdWxkIHByb2JhYmx5IHdvcmsgYWdhaW5zdCBtb3N0IE9EYXRhIEFQSXMsIGJ1dCBidWlsdCB0byBqdXN0XG4vLyB0YWNrbGUgdGhlIHNwZWNpZmljIG5lZWRzIG9mIEFwb2xsb3Mgb24gdG9wIG9mIFJvY2suXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb2NrUmVxdWVzdEJ1aWxkZXIge1xuICBjb25zdHJ1Y3Rvcih7IGNvbm5lY3RvciwgcmVzb3VyY2UsIGRlZmF1bHRPcHRpb25zID0gbnVsbCB9KSB7XG4gICAgdGhpcy5jb25uZWN0b3IgPSBjb25uZWN0b3I7XG4gICAgdGhpcy5yZXNvdXJjZSA9IHJlc291cmNlO1xuICAgIGlmIChkZWZhdWx0T3B0aW9ucykge1xuICAgICAgdGhpcy5xdWVyeSA9IGRlZmF1bHRPcHRpb25zO1xuICAgIH1cbiAgfVxuXG4gIHF1ZXJ5ID0ge307XG5cbiAgdHJhbnNmb3JtcyA9IFtdO1xuXG4gIG9wdGlvbnMgPSB7fTtcblxuICBnZXQgcGF0aCgpIHtcbiAgICBsZXQgcGF0aCA9IFt0aGlzLnJlc291cmNlXTtcbiAgICBpZiAodGhpcy5yZXNvdXJjZUlkKSBwYXRoLnB1c2godGhpcy5yZXNvdXJjZUlkKTtcbiAgICBwYXRoID0gcGF0aC5qb2luKCcvJyk7XG4gICAgcGF0aCA9IHdpdGhRdWVyeShwYXRoLCB0aGlzLnF1ZXJ5KTtcbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBhIEdFVCByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIsIHJlc29sdmVzIHdpdGggcmVzdWx0c1xuICAgKiBAcmV0dXJucyBwcm9taXNlXG4gICAqL1xuICBnZXQgPSAoeyBvcHRpb25zID0ge30sIGJvZHkgPSB7fSB9ID0ge30pID0+XG4gICAgdGhpcy5jb25uZWN0b3JcbiAgICAgIC5nZXQodGhpcy5wYXRoLCBib2R5LCB7IC4uLm9wdGlvbnMsIC4uLnRoaXMub3B0aW9ucyB9KVxuICAgICAgLnRoZW4oKHJlc3VsdHMpID0+IHtcbiAgICAgICAgaWYgKHRoaXMudHJhbnNmb3Jtcy5sZW5ndGgpXG4gICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3Jtcy5yZWR1Y2UoXG4gICAgICAgICAgICAoY3VycmVudCwgdHJhbnNmb3JtZXIpID0+IHRyYW5zZm9ybWVyKGN1cnJlbnQpLFxuICAgICAgICAgICAgcmVzdWx0c1xuICAgICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSk7XG5cbiAgLyoqXG4gICAqIEZpbmQgYSBzaW5nbGUgcmVzb3VyY2UgYnkgSURcbiAgICovXG4gIGZpbmQgPSAoaWQpID0+IHtcbiAgICB0aGlzLnJlc291cmNlSWQgPSBpZDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogRmlsdGVyIHJlc291cmNlcyBieSBhbiBvZGF0YSBzdHJpbmdcbiAgICovXG4gIGZpbHRlciA9IChmaWx0ZXIpID0+IHtcbiAgICBjb25zdCBrZXkgPSAnJGZpbHRlcic7XG4gICAgaWYgKHRoaXMucXVlcnlba2V5XSkge1xuICAgICAgdGhpcy5xdWVyeVtrZXldID0gYCgke3RoaXMucXVlcnlba2V5XX0pIG9yICgke2ZpbHRlcn0pYDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5xdWVyeVtrZXldID0gZmlsdGVyO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBjYWNoZSA9ICh7IHR0bCB9KSA9PiB7XG4gICAgdGhpcy5vcHRpb25zLnR0bCA9IHR0bDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogRXhwYW5kcyByZXNvdXJjZXMgaW5saW5lXG4gICAqL1xuICBleHBhbmQgPSAoZXhwYW5kKSA9PiB7XG4gICAgbGV0IHsgJGV4cGFuZCB9ID0gdGhpcy5xdWVyeTtcbiAgICBpZiAoISRleHBhbmQpIHtcbiAgICAgICRleHBhbmQgPSBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgJGV4cGFuZCA9ICRleHBhbmQuc3BsaXQoJywnKTtcbiAgICB9XG4gICAgJGV4cGFuZC5wdXNoKGV4cGFuZCk7XG4gICAgdGhpcy5xdWVyeS4kZXhwYW5kID0gJGV4cGFuZC5qb2luKCcsJyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIE9yZGVyIHJlc291cmNlcyBieSBhIGdpdmVuIGF0dHJpYnV0ZSBhbmQgZGlyZWN0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUgdG8gb3JkZXIgYnlcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRpcmVjdGlvbiBUaGUgZGlyZWN0aW9uIHRvIG9yZGVyIHJlc3VsdHMgYnkuIERlZmF1bHRzIHRvICdhc2MnXG4gICAqL1xuICBvcmRlckJ5ID0gKG5hbWUsIGRpcmVjdGlvbiA9ICdhc2MnKSA9PiB7XG4gICAgdGhpcy5xdWVyeS4kb3JkZXJieSA9IGAke25hbWV9ICR7ZGlyZWN0aW9ufWA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIE9ubHkgcmV0dXJuIHRoZSB0b3AgTiByZXN1bHRzLiBVc2VkIGZvciBwYWdpbmF0aW9uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0b3BcbiAgICovXG4gIHRvcCA9ICh0b3ApID0+IHtcbiAgICB0aGlzLnF1ZXJ5LiR0b3AgPSB0b3A7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNraXAgdGhlIGZpcnN0IE4gcmVzdWx0cy4gVXNlZCBmb3IgcGFnaW5hdGlvblxuICAgKiBAcGFyYW0ge251bWJlcn0gc2tpcFxuICAgKi9cbiAgc2tpcCA9IChza2lwKSA9PiB7XG4gICAgdGhpcy5xdWVyeS4kc2tpcCA9IHNraXA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNlbGVjdCB3aGljaCBhdHRyaWJ1dGVzIHRvIHJldHVyblxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0XG4gICAqL1xuICBzZWxlY3QgPSAoc2VsZWN0KSA9PiB7XG4gICAgdGhpcy5xdWVyeS4kc2VsZWN0ID0gc2VsZWN0O1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm0gdGhlIHNoYXBlIG9mIHRoZSByZXN1bHRzLlxuICAgKiBUaGlzIGlzIHJhbiBfYWZ0ZXJfIGRhdGEgaXMgcmVxdWVzdGVkIGFuZCBub3RcbiAgICogYWZmZWN0ZWQgYnkgb3RoZXIgbWV0aG9kcyB0aGF0IGFyZSBjaGFpbmVkIHRvIHRoZSByZXF1ZXN0XG4gICAqL1xuICB0cmFuc2Zvcm0gPSAoZnVuYykgPT4ge1xuICAgIHRoaXMudHJhbnNmb3Jtcy5wdXNoKGZ1bmMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xufVxuIl19
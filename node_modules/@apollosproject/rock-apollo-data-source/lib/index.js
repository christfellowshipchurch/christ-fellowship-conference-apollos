"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _apolloDatasourceRest = require("apollo-datasource-rest");

var _config = _interopRequireDefault(require("@apollosproject/config"));

var _lodash = require("lodash");

var _apolloServerEnv = require("apollo-server-env");

var _cursor = require("./cursor");

var _requestBuilder = _interopRequireDefault(require("./request-builder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const {
  ROCK
} = _config.default;

class RockApolloDataSource extends _apolloDatasourceRest.RESTDataSource {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "expanded", false);

    _defineProperty(this, "baseURL", ROCK.API_URL);

    _defineProperty(this, "rockToken", ROCK.API_TOKEN);

    _defineProperty(this, "nodeFetch", _apolloServerEnv.fetch);

    _defineProperty(this, "normalize", data => {
      if (Array.isArray(data)) return data.map(this.normalize);
      if (typeof data !== 'object') return data;
      const normalizedValues = (0, _lodash.mapValues)(data, this.normalize);
      return (0, _lodash.mapKeys)(normalizedValues, (value, key) => (0, _lodash.camelCase)(key));
    });
  }

  didReceiveResponse(response, request) {
    // Can't use await b/c of `super` keyword
    return super.didReceiveResponse(response, request).then(parsedResponse => this.normalize(parsedResponse));
  }

  willSendRequest(request) {
    request.headers.set('Authorization-Token', this.rockToken);
    request.headers.set('user-agent', 'Apollos');
    request.headers.set('Content-Type', 'application/json');
  }

  request(resource = this.resource) {
    return new _requestBuilder.default({
      resource,
      connector: this,
      defaultOptions: this.expanded ? {
        loadAttributes: 'expanded'
      } : null
    });
  }

  async paginate({
    cursor,
    args: {
      after,
      first = 20
    } = {}
  }) {
    let skip = 0;

    if (after) {
      const parsed = (0, _cursor.parseCursor)(after);

      if (parsed && Object.hasOwnProperty.call(parsed, 'position')) {
        skip = parsed.position + 1;
      } else {
        throw new Error(`An invalid 'after' cursor was provided: ${after}`);
      }
    }

    const edges = cursor ? cursor.top(first).skip(skip).transform(result => result.map((node, i) => ({
      node,
      cursor: (0, _cursor.createCursor)({
        position: i + skip
      })
    }))).get() : [];
    return {
      edges
    };
  }

}

exports.default = RockApolloDataSource;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJST0NLIiwiQXBvbGxvc0NvbmZpZyIsIlJvY2tBcG9sbG9EYXRhU291cmNlIiwiUkVTVERhdGFTb3VyY2UiLCJBUElfVVJMIiwiQVBJX1RPS0VOIiwiZmV0Y2giLCJkYXRhIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwibm9ybWFsaXplIiwibm9ybWFsaXplZFZhbHVlcyIsInZhbHVlIiwia2V5IiwiZGlkUmVjZWl2ZVJlc3BvbnNlIiwicmVzcG9uc2UiLCJyZXF1ZXN0IiwidGhlbiIsInBhcnNlZFJlc3BvbnNlIiwid2lsbFNlbmRSZXF1ZXN0IiwiaGVhZGVycyIsInNldCIsInJvY2tUb2tlbiIsInJlc291cmNlIiwiUmVxdWVzdEJ1aWxkZXIiLCJjb25uZWN0b3IiLCJkZWZhdWx0T3B0aW9ucyIsImV4cGFuZGVkIiwibG9hZEF0dHJpYnV0ZXMiLCJwYWdpbmF0ZSIsImN1cnNvciIsImFyZ3MiLCJhZnRlciIsImZpcnN0Iiwic2tpcCIsInBhcnNlZCIsIk9iamVjdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInBvc2l0aW9uIiwiRXJyb3IiLCJlZGdlcyIsInRvcCIsInRyYW5zZm9ybSIsInJlc3VsdCIsIm5vZGUiLCJpIiwiZ2V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7OztBQUVBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFXQyxlQUFqQjs7QUFFZSxNQUFNQyxvQkFBTixTQUFtQ0Msb0NBQW5DLENBQWtEO0FBQUE7QUFBQTs7QUFBQSxzQ0FFcEQsS0FGb0Q7O0FBQUEscUNBSXJESCxJQUFJLENBQUNJLE9BSmdEOztBQUFBLHVDQU1uREosSUFBSSxDQUFDSyxTQU44Qzs7QUFBQSx1Q0FRbkRDLHNCQVJtRDs7QUFBQSx1Q0F1QmxEQyxJQUFELElBQVU7QUFDcEIsVUFBSUMsS0FBSyxDQUFDQyxPQUFOLENBQWNGLElBQWQsQ0FBSixFQUF5QixPQUFPQSxJQUFJLENBQUNHLEdBQUwsQ0FBUyxLQUFLQyxTQUFkLENBQVA7QUFDekIsVUFBSSxPQUFPSixJQUFQLEtBQWdCLFFBQXBCLEVBQThCLE9BQU9BLElBQVA7QUFDOUIsWUFBTUssZ0JBQWdCLEdBQUcsdUJBQVVMLElBQVYsRUFBZ0IsS0FBS0ksU0FBckIsQ0FBekI7QUFDQSxhQUFPLHFCQUFRQyxnQkFBUixFQUEwQixDQUFDQyxLQUFELEVBQVFDLEdBQVIsS0FBZ0IsdUJBQVVBLEdBQVYsQ0FBMUMsQ0FBUDtBQUNELEtBNUI4RDtBQUFBOztBQVUvREMsRUFBQUEsa0JBQWtCLENBQUNDLFFBQUQsRUFBV0MsT0FBWCxFQUFvQjtBQUNwQztBQUNBLFdBQU8sTUFDSkYsa0JBREksQ0FDZUMsUUFEZixFQUN5QkMsT0FEekIsRUFFSkMsSUFGSSxDQUVFQyxjQUFELElBQW9CLEtBQUtSLFNBQUwsQ0FBZVEsY0FBZixDQUZyQixDQUFQO0FBR0Q7O0FBRURDLEVBQUFBLGVBQWUsQ0FBQ0gsT0FBRCxFQUFVO0FBQ3ZCQSxJQUFBQSxPQUFPLENBQUNJLE9BQVIsQ0FBZ0JDLEdBQWhCLENBQW9CLHFCQUFwQixFQUEyQyxLQUFLQyxTQUFoRDtBQUNBTixJQUFBQSxPQUFPLENBQUNJLE9BQVIsQ0FBZ0JDLEdBQWhCLENBQW9CLFlBQXBCLEVBQWtDLFNBQWxDO0FBQ0FMLElBQUFBLE9BQU8sQ0FBQ0ksT0FBUixDQUFnQkMsR0FBaEIsQ0FBb0IsY0FBcEIsRUFBb0Msa0JBQXBDO0FBQ0Q7O0FBU0RMLEVBQUFBLE9BQU8sQ0FBQ08sUUFBUSxHQUFHLEtBQUtBLFFBQWpCLEVBQTJCO0FBQ2hDLFdBQU8sSUFBSUMsdUJBQUosQ0FBbUI7QUFDeEJELE1BQUFBLFFBRHdCO0FBRXhCRSxNQUFBQSxTQUFTLEVBQUUsSUFGYTtBQUd4QkMsTUFBQUEsY0FBYyxFQUFFLEtBQUtDLFFBQUwsR0FBZ0I7QUFBRUMsUUFBQUEsY0FBYyxFQUFFO0FBQWxCLE9BQWhCLEdBQWlEO0FBSHpDLEtBQW5CLENBQVA7QUFLRDs7QUFFRCxRQUFNQyxRQUFOLENBQWU7QUFBRUMsSUFBQUEsTUFBRjtBQUFVQyxJQUFBQSxJQUFJLEVBQUU7QUFBRUMsTUFBQUEsS0FBRjtBQUFTQyxNQUFBQSxLQUFLLEdBQUc7QUFBakIsUUFBd0I7QUFBeEMsR0FBZixFQUE2RDtBQUMzRCxRQUFJQyxJQUFJLEdBQUcsQ0FBWDs7QUFDQSxRQUFJRixLQUFKLEVBQVc7QUFDVCxZQUFNRyxNQUFNLEdBQUcseUJBQVlILEtBQVosQ0FBZjs7QUFDQSxVQUFJRyxNQUFNLElBQUlDLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsSUFBdEIsQ0FBMkJILE1BQTNCLEVBQW1DLFVBQW5DLENBQWQsRUFBOEQ7QUFDNURELFFBQUFBLElBQUksR0FBR0MsTUFBTSxDQUFDSSxRQUFQLEdBQWtCLENBQXpCO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsY0FBTSxJQUFJQyxLQUFKLENBQVcsMkNBQTBDUixLQUFNLEVBQTNELENBQU47QUFDRDtBQUNGOztBQUVELFVBQU1TLEtBQUssR0FBR1gsTUFBTSxHQUNoQkEsTUFBTSxDQUNIWSxHQURILENBQ09ULEtBRFAsRUFFR0MsSUFGSCxDQUVRQSxJQUZSLEVBR0dTLFNBSEgsQ0FHY0MsTUFBRCxJQUNUQSxNQUFNLENBQUNuQyxHQUFQLENBQVcsQ0FBQ29DLElBQUQsRUFBT0MsQ0FBUCxNQUFjO0FBQ3ZCRCxNQUFBQSxJQUR1QjtBQUV2QmYsTUFBQUEsTUFBTSxFQUFFLDBCQUFhO0FBQUVTLFFBQUFBLFFBQVEsRUFBRU8sQ0FBQyxHQUFHWjtBQUFoQixPQUFiO0FBRmUsS0FBZCxDQUFYLENBSkosRUFTR2EsR0FUSCxFQURnQixHQVdoQixFQVhKO0FBYUEsV0FBTztBQUNMTixNQUFBQTtBQURLLEtBQVA7QUFHRDs7QUFqRThEIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAqL1xuaW1wb3J0IHsgUkVTVERhdGFTb3VyY2UgfSBmcm9tICdhcG9sbG8tZGF0YXNvdXJjZS1yZXN0JztcbmltcG9ydCBBcG9sbG9zQ29uZmlnIGZyb20gJ0BhcG9sbG9zcHJvamVjdC9jb25maWcnO1xuXG5pbXBvcnQgeyBtYXBLZXlzLCBtYXBWYWx1ZXMsIGNhbWVsQ2FzZSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBmZXRjaCB9IGZyb20gJ2Fwb2xsby1zZXJ2ZXItZW52JztcbmltcG9ydCB7IGNyZWF0ZUN1cnNvciwgcGFyc2VDdXJzb3IgfSBmcm9tICcuL2N1cnNvcic7XG5cbmltcG9ydCBSZXF1ZXN0QnVpbGRlciBmcm9tICcuL3JlcXVlc3QtYnVpbGRlcic7XG5cbmNvbnN0IHsgUk9DSyB9ID0gQXBvbGxvc0NvbmZpZztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm9ja0Fwb2xsb0RhdGFTb3VyY2UgZXh0ZW5kcyBSRVNURGF0YVNvdXJjZSB7XG4gIC8vIFN1YmNsYXNzZXMgY2FuIHNldCB0aGlzIHRvIHRydWUgdG8gZm9yY2UgYWxsIHJlcXVlc3RzIHRvIHR1cm4gZXh0ZW5kZWQgcmVzcG9uc2VzLlxuICBleHBhbmRlZCA9IGZhbHNlO1xuXG4gIGJhc2VVUkwgPSBST0NLLkFQSV9VUkw7XG5cbiAgcm9ja1Rva2VuID0gUk9DSy5BUElfVE9LRU47XG5cbiAgbm9kZUZldGNoID0gZmV0Y2g7XG5cbiAgZGlkUmVjZWl2ZVJlc3BvbnNlKHJlc3BvbnNlLCByZXF1ZXN0KSB7XG4gICAgLy8gQ2FuJ3QgdXNlIGF3YWl0IGIvYyBvZiBgc3VwZXJgIGtleXdvcmRcbiAgICByZXR1cm4gc3VwZXJcbiAgICAgIC5kaWRSZWNlaXZlUmVzcG9uc2UocmVzcG9uc2UsIHJlcXVlc3QpXG4gICAgICAudGhlbigocGFyc2VkUmVzcG9uc2UpID0+IHRoaXMubm9ybWFsaXplKHBhcnNlZFJlc3BvbnNlKSk7XG4gIH1cblxuICB3aWxsU2VuZFJlcXVlc3QocmVxdWVzdCkge1xuICAgIHJlcXVlc3QuaGVhZGVycy5zZXQoJ0F1dGhvcml6YXRpb24tVG9rZW4nLCB0aGlzLnJvY2tUb2tlbik7XG4gICAgcmVxdWVzdC5oZWFkZXJzLnNldCgndXNlci1hZ2VudCcsICdBcG9sbG9zJyk7XG4gICAgcmVxdWVzdC5oZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgfVxuXG4gIG5vcm1hbGl6ZSA9IChkYXRhKSA9PiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHJldHVybiBkYXRhLm1hcCh0aGlzLm5vcm1hbGl6ZSk7XG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JykgcmV0dXJuIGRhdGE7XG4gICAgY29uc3Qgbm9ybWFsaXplZFZhbHVlcyA9IG1hcFZhbHVlcyhkYXRhLCB0aGlzLm5vcm1hbGl6ZSk7XG4gICAgcmV0dXJuIG1hcEtleXMobm9ybWFsaXplZFZhbHVlcywgKHZhbHVlLCBrZXkpID0+IGNhbWVsQ2FzZShrZXkpKTtcbiAgfTtcblxuICByZXF1ZXN0KHJlc291cmNlID0gdGhpcy5yZXNvdXJjZSkge1xuICAgIHJldHVybiBuZXcgUmVxdWVzdEJ1aWxkZXIoe1xuICAgICAgcmVzb3VyY2UsXG4gICAgICBjb25uZWN0b3I6IHRoaXMsXG4gICAgICBkZWZhdWx0T3B0aW9uczogdGhpcy5leHBhbmRlZCA/IHsgbG9hZEF0dHJpYnV0ZXM6ICdleHBhbmRlZCcgfSA6IG51bGwsXG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBwYWdpbmF0ZSh7IGN1cnNvciwgYXJnczogeyBhZnRlciwgZmlyc3QgPSAyMCB9ID0ge30gfSkge1xuICAgIGxldCBza2lwID0gMDtcbiAgICBpZiAoYWZ0ZXIpIHtcbiAgICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlQ3Vyc29yKGFmdGVyKTtcbiAgICAgIGlmIChwYXJzZWQgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwocGFyc2VkLCAncG9zaXRpb24nKSkge1xuICAgICAgICBza2lwID0gcGFyc2VkLnBvc2l0aW9uICsgMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQW4gaW52YWxpZCAnYWZ0ZXInIGN1cnNvciB3YXMgcHJvdmlkZWQ6ICR7YWZ0ZXJ9YCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZWRnZXMgPSBjdXJzb3JcbiAgICAgID8gY3Vyc29yXG4gICAgICAgICAgLnRvcChmaXJzdClcbiAgICAgICAgICAuc2tpcChza2lwKVxuICAgICAgICAgIC50cmFuc2Zvcm0oKHJlc3VsdCkgPT5cbiAgICAgICAgICAgIHJlc3VsdC5tYXAoKG5vZGUsIGkpID0+ICh7XG4gICAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICAgIGN1cnNvcjogY3JlYXRlQ3Vyc29yKHsgcG9zaXRpb246IGkgKyBza2lwIH0pLFxuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgKVxuICAgICAgICAgIC5nZXQoKVxuICAgICAgOiBbXTtcblxuICAgIHJldHVybiB7XG4gICAgICBlZGdlcyxcbiAgICB9O1xuICB9XG59XG4iXX0=
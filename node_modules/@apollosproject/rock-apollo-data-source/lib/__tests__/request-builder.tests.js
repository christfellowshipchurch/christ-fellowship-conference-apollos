"use strict";

var _requestBuilder = _interopRequireDefault(require("../request-builder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('RequestBuilder', () => {
  let request;
  let connector;
  let get;
  beforeEach(() => {
    get = jest.fn((...args) => new Promise(resolve => resolve(args)));
    connector = {
      get
    };
    request = new _requestBuilder.default({
      connector,
      resource: 'SomeResource'
    });
  });
  it('constructs', () => {
    expect(request).toBeTruthy();
  });
  it('gets requests', () => {
    expect(request.get()).resolves.toMatchSnapshot();
  });
  it('finds by id', () => {
    expect(request.find(1).get()).resolves.toMatchSnapshot();
  });
  it('filters', () => {
    expect(request.filter('Something eq SomethingElse').get()).resolves.toMatchSnapshot();
  });
  it('chains multiple filters', () => {
    expect(request.filter('A eq Ab').filter('B eq Bc').get()).resolves.toMatchSnapshot();
  });
  it('expands', () => {
    expect(request.expand('Puppies').get()).resolves.toMatchSnapshot();
  });
  it('chains multiple expands', () => {
    expect(request.expand('Puppies').expand('Cats').get()).resolves.toMatchSnapshot();
  });
  it('chains mixed-format expands', () => {
    expect(request.expand('Dogs/Puppies').expand('Cats,Kittens').get()).resolves.toMatchSnapshot();
  });
  it('allows for pagination', () => {
    expect(request.top(2).skip(5).get()).resolves.toMatchSnapshot();
  });
  it('caches', () => {
    expect(request.cache({
      ttl: 20
    }).get()).resolves.toMatchSnapshot();
  });
  it('orders', () => {
    expect(request.orderBy('MyField').get()).resolves.toMatchSnapshot();
  });
  it('orders in custom order', () => {
    expect(request.orderBy('MyField', 'desc').get()).resolves.toMatchSnapshot();
  });
  it('transforms result shapes', () => {
    get = jest.fn(() => new Promise(resolve => resolve({
      a: 'yo'
    })));
    connector = {
      get
    };
    request = new _requestBuilder.default({
      connector,
      resource: 'SomeResource'
    });
    expect(request.transform(input => {
      expect(input).toMatchSnapshot();
      return {
        b: 'neigh'
      };
    }).get()).resolves.toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fX3Rlc3RzX18vcmVxdWVzdC1idWlsZGVyLnRlc3RzLmpzIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwicmVxdWVzdCIsImNvbm5lY3RvciIsImdldCIsImJlZm9yZUVhY2giLCJqZXN0IiwiZm4iLCJhcmdzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJSZXF1ZXN0QnVpbGRlciIsInJlc291cmNlIiwiaXQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwicmVzb2x2ZXMiLCJ0b01hdGNoU25hcHNob3QiLCJmaW5kIiwiZmlsdGVyIiwiZXhwYW5kIiwidG9wIiwic2tpcCIsImNhY2hlIiwidHRsIiwib3JkZXJCeSIsImEiLCJ0cmFuc2Zvcm0iLCJpbnB1dCIsImIiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFFQUEsUUFBUSxDQUFDLGdCQUFELEVBQW1CLE1BQU07QUFDL0IsTUFBSUMsT0FBSjtBQUNBLE1BQUlDLFNBQUo7QUFDQSxNQUFJQyxHQUFKO0FBRUFDLEVBQUFBLFVBQVUsQ0FBQyxNQUFNO0FBQ2ZELElBQUFBLEdBQUcsR0FBR0UsSUFBSSxDQUFDQyxFQUFMLENBQVEsQ0FBQyxHQUFHQyxJQUFKLEtBQWEsSUFBSUMsT0FBSixDQUFhQyxPQUFELElBQWFBLE9BQU8sQ0FBQ0YsSUFBRCxDQUFoQyxDQUFyQixDQUFOO0FBQ0FMLElBQUFBLFNBQVMsR0FBRztBQUFFQyxNQUFBQTtBQUFGLEtBQVo7QUFDQUYsSUFBQUEsT0FBTyxHQUFHLElBQUlTLHVCQUFKLENBQW1CO0FBQzNCUixNQUFBQSxTQUQyQjtBQUUzQlMsTUFBQUEsUUFBUSxFQUFFO0FBRmlCLEtBQW5CLENBQVY7QUFJRCxHQVBTLENBQVY7QUFTQUMsRUFBQUEsRUFBRSxDQUFDLFlBQUQsRUFBZSxNQUFNO0FBQ3JCQyxJQUFBQSxNQUFNLENBQUNaLE9BQUQsQ0FBTixDQUFnQmEsVUFBaEI7QUFDRCxHQUZDLENBQUY7QUFJQUYsRUFBQUEsRUFBRSxDQUFDLGVBQUQsRUFBa0IsTUFBTTtB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QyxFQUFMLENBQVEsTUFBTSxJQUFJRSxPQUFKLENBQWFDLE9BQUQsSUFBYUEsT0FBTyxDQUFDO0FBQUVnQixNQUFBQSxDQUFDLEVBQUU7QUFBTCxLQUFELENBQWhDLENBQWQsQ0FBTjtBQUNBdkIsSUFBQUEsU0FBUyxHQUFHO0FBQUVDLE1BQUFBO0FBQUYsS0FBWjtBQUNBRixJQUFBQSxPQUFPLEdBQUcsSUFBSVMsdUJBQUosQ0FBbUI7QUFDM0JSLE1BQUFBLFNBRDJCO0FBRTNCUyxNQUFBQSxRQUFRLEVBQUU7QUFGaUIsS0FBbkIsQ0FBVjtBQUtBRSxJQUFBQSxNQUFNLENBQ0paLE9BQU8sQ0FDSnlCLFNBREgsQ0FDY0MsS0FBRCxJQUFXO0FBQ3BCZCxNQUFBQSxNQUFNLENBQUNjLEtBQUQsQ0FBTixDQUFjWCxlQUFkO0FBQ0EsYUFBTztBQUFFWSxRQUFBQSxDQUFDLEVBQUU7QUFBTCxPQUFQO0FBQ0QsS0FKSCxFQUtHekIsR0FMSCxFQURJLENBQU4sQ0FPRVksUUFQRixDQU9XQyxlQVBYO0FBUUQsR0FoQkMsQ0FBRjtBQWlCRCxDQXJHTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlcXVlc3RCdWlsZGVyIGZyb20gJy4uL3JlcXVlc3QtYnVpbGRlcic7XG5cbmRlc2NyaWJlKCdSZXF1ZXN0QnVpbGRlcicsICgpID0+IHtcbiAgbGV0IHJlcXVlc3Q7XG4gIGxldCBjb25uZWN0b3I7XG4gIGxldCBnZXQ7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgZ2V0ID0gamVzdC5mbigoLi4uYXJncykgPT4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHJlc29sdmUoYXJncykpKTtcbiAgICBjb25uZWN0b3IgPSB7IGdldCB9O1xuICAgIHJlcXVlc3QgPSBuZXcgUmVxdWVzdEJ1aWxkZXIoe1xuICAgICAgY29ubmVjdG9yLFxuICAgICAgcmVzb3VyY2U6ICdTb21lUmVzb3VyY2UnLFxuICAgIH0pO1xuICB9KTtcblxuICBpdCgnY29uc3RydWN0cycsICgpID0+IHtcbiAgICBleHBlY3QocmVxdWVzdCkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgnZ2V0cyByZXF1ZXN0cycsICgpID0+IHtcbiAgICBleHBlY3QocmVxdWVzdC5nZXQoKSkucmVzb2x2ZXMudG9NYXRjaFNuYXBzaG90KCk7XG4gIH0pO1xuXG4gIGl0KCdmaW5kcyBieSBpZCcsICgpID0+IHtcbiAgICBleHBlY3QocmVxdWVzdC5maW5kKDEpLmdldCgpKS5yZXNvbHZlcy50b01hdGNoU25hcHNob3QoKTtcbiAgfSk7XG5cbiAgaXQoJ2ZpbHRlcnMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgcmVxdWVzdC5maWx0ZXIoJ1NvbWV0aGluZyBlcSBTb21ldGhpbmdFbHNlJykuZ2V0KClcbiAgICApLnJlc29sdmVzLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICB9KTtcblxuICBpdCgnY2hhaW5zIG11bHRpcGxlIGZpbHRlcnMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgcmVxdWVzdFxuICAgICAgICAuZmlsdGVyKCdBIGVxIEFiJylcbiAgICAgICAgLmZpbHRlcignQiBlcSBCYycpXG4gICAgICAgIC5nZXQoKVxuICAgICkucmVzb2x2ZXMudG9NYXRjaFNuYXBzaG90KCk7XG4gIH0pO1xuXG4gIGl0KCdleHBhbmRzJywgKCkgPT4ge1xuICAgIGV4cGVjdChyZXF1ZXN0LmV4cGFuZCgnUHVwcGllcycpLmdldCgpKS5yZXNvbHZlcy50b01hdGNoU25hcHNob3QoKTtcbiAgfSk7XG5cbiAgaXQoJ2NoYWlucyBtdWx0aXBsZSBleHBhbmRzJywgKCkgPT4ge1xuICAgIGV4cGVjdChcbiAgICAgIHJlcXVlc3RcbiAgICAgICAgLmV4cGFuZCgnUHVwcGllcycpXG4gICAgICAgIC5leHBhbmQoJ0NhdHMnKVxuICAgICAgICAuZ2V0KClcbiAgICApLnJlc29sdmVzLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICB9KTtcblxuICBpdCgnY2hhaW5zIG1peGVkLWZvcm1hdCBleHBhbmRzJywgKCkgPT4ge1xuICAgIGV4cGVjdChcbiAgICAgIHJlcXVlc3RcbiAgICAgICAgLmV4cGFuZCgnRG9ncy9QdXBwaWVzJylcbiAgICAgICAgLmV4cGFuZCgnQ2F0cyxLaXR0ZW5zJylcbiAgICAgICAgLmdldCgpXG4gICAgKS5yZXNvbHZlcy50b01hdGNoU25hcHNob3QoKTtcbiAgfSk7XG5cbiAgaXQoJ2FsbG93cyBmb3IgcGFnaW5hdGlvbicsICgpID0+IHtcbiAgICBleHBlY3QoXG4gICAgICByZXF1ZXN0XG4gICAgICAgIC50b3AoMilcbiAgICAgICAgLnNraXAoNSlcbiAgICAgICAgLmdldCgpXG4gICAgKS5yZXNvbHZlcy50b01hdGNoU25hcHNob3QoKTtcbiAgfSk7XG5cbiAgaXQoJ2NhY2hlcycsICgpID0+IHtcbiAgICBleHBlY3QocmVxdWVzdC5jYWNoZSh7IHR0bDogMjAgfSkuZ2V0KCkpLnJlc29sdmVzLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICB9KTtcblxuICBpdCgnb3JkZXJzJywgKCkgPT4ge1xuICAgIGV4cGVjdChyZXF1ZXN0Lm9yZGVyQnkoJ015RmllbGQnKS5nZXQoKSkucmVzb2x2ZXMudG9NYXRjaFNuYXBzaG90KCk7XG4gIH0pO1xuXG4gIGl0KCdvcmRlcnMgaW4gY3VzdG9tIG9yZGVyJywgKCkgPT4ge1xuICAgIGV4cGVjdChyZXF1ZXN0Lm9yZGVyQnkoJ015RmllbGQnLCAnZGVzYycpLmdldCgpKS5yZXNvbHZlcy50b01hdGNoU25hcHNob3QoKTtcbiAgfSk7XG5cbiAgaXQoJ3RyYW5zZm9ybXMgcmVzdWx0IHNoYXBlcycsICgpID0+IHtcbiAgICBnZXQgPSBqZXN0LmZuKCgpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiByZXNvbHZlKHsgYTogJ3lvJyB9KSkpO1xuICAgIGNvbm5lY3RvciA9IHsgZ2V0IH07XG4gICAgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0QnVpbGRlcih7XG4gICAgICBjb25uZWN0b3IsXG4gICAgICByZXNvdXJjZTogJ1NvbWVSZXNvdXJjZScsXG4gICAgfSk7XG5cbiAgICBleHBlY3QoXG4gICAgICByZXF1ZXN0XG4gICAgICAgIC50cmFuc2Zvcm0oKGlucHV0KSA9PiB7XG4gICAgICAgICAgZXhwZWN0KGlucHV0KS50b01hdGNoU25hcHNob3QoKTtcbiAgICAgICAgICByZXR1cm4geyBiOiAnbmVpZ2gnIH07XG4gICAgICAgIH0pXG4gICAgICAgIC5nZXQoKVxuICAgICkucmVzb2x2ZXMudG9NYXRjaFNuYXBzaG90KCk7XG4gIH0pO1xufSk7XG4iXX0=
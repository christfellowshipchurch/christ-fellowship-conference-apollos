"use strict";

var _cursor = require("../cursor");

var _index = _interopRequireDefault(require("../index"));

var _requestBuilder = _interopRequireDefault(require("../request-builder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('RestDataSource', () => {
  it('constructs', () => {
    expect(new _index.default()).toBeTruthy();
  }); // it('has configurable url and token', () => {
  //   setRockVariables({ url: 'http://example.com', token: 'some-token' });
  //   const datasource = new RestDataSource();
  //   expect(datasource.baseURL).toEqual('http://example.com');
  //   expect(datasource.rockToken).toEqual('some-token');
  // });

  describe('the paginate method', () => {
    let get;
    let dataSource;
    beforeEach(() => {
      get = jest.fn();
      get.mockReturnValue(new Promise(resolve => resolve([1, 2, 3])));
      dataSource = new _index.default();

      dataSource.request = resource => new _requestBuilder.default({
        resource,
        connector: {
          get
        }
      });
    });
    it('paginates a cursor', () => {
      const cursor = dataSource.request('TestResource');
      const result = dataSource.paginate({
        cursor
      });
      expect(result).toBeTruthy();
      expect(get.mock.calls[0][0]).toBe('TestResource?%24top=20&%24skip=0');
    });
    it('skips pages', () => {
      const cursor = dataSource.request('TestResource');
      const after = (0, _cursor.createCursor)({
        position: 25
      });
      const result = dataSource.paginate({
        cursor,
        args: {
          after
        }
      });
      expect(result).toBeTruthy();
      expect(get.mock.calls[0][0]).toBe('TestResource?%24top=20&%24skip=26');
    });
    it('throws on an invalid `after` cursor', () => {
      const cursor = dataSource.request('TestResource');
      const after = (0, _cursor.createCursor)({
        position: 25
      });
      const result = dataSource.paginate({
        cursor,
        args: {
          after
        }
      });
      expect(result).rejects.toThrow();
    });
    it('sets page size', () => {
      const cursor = dataSource.request('TestResource');
      const result = dataSource.paginate({
        cursor,
        args: {
          first: 2
        }
      });
      expect(result).toBeTruthy();
      expect(get.mock.calls[0][0]).toBe('TestResource?%24top=2&%24skip=0');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fX3Rlc3RzX18vZGF0YS1zb3VyY2UudGVzdHMuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJpdCIsImV4cGVjdCIsIlJlc3REYXRhU291cmNlIiwidG9CZVRydXRoeSIsImdldCIsImRhdGFTb3VyY2UiLCJiZWZvcmVFYWNoIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZXF1ZXN0IiwicmVzb3VyY2UiLCJSZXF1ZXN0QnVpbGRlciIsImNvbm5lY3RvciIsImN1cnNvciIsInJlc3VsdCIsInBhZ2luYXRlIiwibW9jayIsImNhbGxzIiwidG9CZSIsImFmdGVyIiwicG9zaXRpb24iLCJhcmdzIiwicmVqZWN0cyIsInRvVGhyb3ciLCJmaXJzdCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFDQTs7OztBQUVBQSxRQUFRLENBQUMsZ0JBQUQsRUFBbUIsTUFBTTtBQUMvQkMsRUFBQUEsRUFBRSxDQUFDLFlBQUQsRUFBZSxNQUFNO0FBQ3JCQyxJQUFBQSxNQUFNLENBQUMsSUFBSUMsY0FBSixFQUFELENBQU4sQ0FBNkJDLFVBQTdCO0FBQ0QsR0FGQyxDQUFGLENBRCtCLENBSy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQUosRUFBQUEsUUFBUSxDQUFDLHFCQUFELEVBQXdCLE1BQU07QUFDcEMsUUFBSUssR0FBSjtBQUNBLFFBQUlDLFVBQUo7QUFDQUMsSUFBQUEsVUFBVSxDQUFDLE1BQU07QUFDZkYsTUFBQUEsR0FBRyxHQUFHRyxJQUFJLENBQUNDLEVBQUwsRUFBTjtBQUNBSixNQUFBQSxHQUFHLENBQUNLLGVBQUosQ0FBb0IsSUFBSUMsT0FBSixDQUFhQyxPQUFELElBQWFBLE9BQU8sQ0FBQyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUFELENBQWhDLENBQXBCO0FBQ0FOLE1BQUFBLFVBQVUsR0FBRyxJQUFJSCxjQUFKLEVBQWI7O0FBQ0FHLE1BQUFBLFVBQVUsQ0FBQ08sT0FBWCxHQUFzQkMsUUFBRCxJQUNuQixJQUFJQyx1QkFBSixDQUFtQjtBQUNqQkQsUUFBQUEsUUFEaUI7QUFFakJFLFFBQUFBLFNBQVMsRUFBRTtBQUFFWCxVQUFBQTtBQUFGO0FBRk0sT0FBbkIsQ0FERjtBQUtELEtBVFMsQ0FBVjtBQVdBSixJQUFBQSxFQUFFLENBQUMsb0JBQUQsRUFBdUIsTUFBTTtBQUM3QixZQUFNZ0IsTUFBTSxHQUFHWCxVQUFVLENBQUNPLE9BQVgsQ0FBbUIsY0FBbkIsQ0FBZjtBQUNBLFlBQU1LLE1BQU0sR0FBR1osVUFBVSxDQUFDYSxRQUFYLENBQW9CO0FBQUVGLFFBQUFBO0FBQUYsT0FBcEIsQ0FBZjtBQUNBZixNQUFBQSxNQUFNLENBQUNnQixNQUFELENBQU4sQ0FBZWQsVUFBZjtBQUNBRixNQUFBQSxNQUFNLENBQUNHLEdBQUcsQ0FBQ2UsSUFBSixDQUFTQyxLQUFULENBQWUsQ0FBZixFQUFrQixDQUFsQixDQUFELENBQU4sQ0FBNkJDLElBQTdCLENBQWtDLGtDQUFsQztBQUNELEtBTEMsQ0FBRjtBQU9BckIsSUFBQUEsRUFBRSxDQUFDLGFBQUQsRUFBZ0IsTUFBTTtBQUN0QixZQUFNZ0IsTUFBTSxHQUFHWCxVQUFVLENBQUNPLE9BQVgsQ0FBbUIsY0FBbkIsQ0FBZjtBQUNBLFlBQU1VLEtBQUssR0FBRywwQkFBYTtBQUFFQyxRQUFBQSxRQUFRLEVBQUU7QUFBWixPQUFiLENBQWQ7QUFDQSxZQUFNTixNQUFNLEdBQUdaLFVBQVUsQ0FBQ2EsUUFBWCxDQUFvQjtBQUFFRixRQUFBQSxNQUFGO0FBQVVRLFFBQUFBLElBQUksRUFBRTtBQUFFRixVQUFBQTtBQUFGO0FBQWhCLE9BQXBCLENBQWY7QUFDQXJCLE1BQUFBLE1BQU0sQ0FBQ2dCLE1BQUQsQ0FBTixDQUFlZCxVQUFmO0FBQ0FGLE1BQUFBLE1BQU0sQ0FBQ0csR0FBRyxDQUFDZSxJQUFKLENBQVNDLEtBQVQsQ0FBZSxDQUFmLEVBQWtCLENBQWxCLENBQUQsQ0FBTixDQUE2QkMsSUFBN0IsQ0FBa0MsbUNBQWxDO0FBQ0QsS0FOQyxDQUFGO0FBUUFyQixJQUFBQSxFQUFFLENBQUMscUNBQUQsRUFBd0MsTUFBTTtBQUM5QyxZQUFNZ0IsTUFBTSxHQUFHWCxVQUFVLENBQUNPLE9BQVgsQ0FBbUIsY0FBbkIsQ0FBZjtBQUNBLFlBQU1VLEtBQUssR0FBRywwQkFBYTtBQUFFQyxRQUFBQSxRQUFRLEVBQUU7QUFBWixPQUFiLENBQWQ7QUFDQSxZQUFNTixNQUFNLEdBQUdaLFVBQVUsQ0FBQ2EsUUFBWCxDQUFvQjtBQUFFRixRQUFBQSxNQUFGO0FBQVVRLFFBQUFBLElBQUksRUFBRTtBQUFFRixVQUFBQTtBQUFGO0FBQWhCLE9BQXBCLENBQWY7QUFDQXJCLE1BQUFBLE1BQU0sQ0FBQ2dCLE1BQUQsQ0FBTixDQUFlUSxPQUFmLENBQXVCQyxPQUF2QjtBQUNELEtBTEMsQ0FBRjtBQU9BMUIsSUFBQUEsRUFBRSxDQUFDLGdCQUFELEVBQW1CLE1BQU07QUFDekIsWUFBTWdCLE1BQU0sR0FBR1gsVUFBVSxDQUFDTyxPQUFYLENBQW1CLGNBQW5CLENBQWY7QUFDQSxZQUFNSyxNQUFNLEdBQUdaLFVBQVUsQ0FBQ2EsUUFBWCxDQUFvQjtBQUFFRixRQUFBQSxNQUFGO0FBQVVRLFFBQUFBLElBQUksRUFBRTtBQUFFRyxVQUFBQSxLQUFLLEVBQUU7QUFBVDtBQUFoQixPQUFwQixDQUFmO0FBQ0ExQixNQUFBQSxNQUFNLENBQUNnQixNQUFELENBQU4sQ0FBZWQsVUFBZjtBQUNBRixNQUFBQSxNQUFNLENBQUNHLEdBQUcsQ0FBQ2UsSUFBSixDQUFTQyxLQUFULENBQWUsQ0FBZixFQUFrQixDQUFsQixDQUFELENBQU4sQ0FBNkJDLElBQTdCLENBQWtDLGlDQUFsQztBQUNELEtBTEMsQ0FBRjtBQU1ELEdBMUNPLENBQVI7QUEyQ0QsQ0F2RE8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUN1cnNvciB9IGZyb20gJy4uL2N1cnNvcic7XG5pbXBvcnQgUmVzdERhdGFTb3VyY2UgZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IFJlcXVlc3RCdWlsZGVyIGZyb20gJy4uL3JlcXVlc3QtYnVpbGRlcic7XG5cbmRlc2NyaWJlKCdSZXN0RGF0YVNvdXJjZScsICgpID0+IHtcbiAgaXQoJ2NvbnN0cnVjdHMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KG5ldyBSZXN0RGF0YVNvdXJjZSgpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIC8vIGl0KCdoYXMgY29uZmlndXJhYmxlIHVybCBhbmQgdG9rZW4nLCAoKSA9PiB7XG4gIC8vICAgc2V0Um9ja1ZhcmlhYmxlcyh7IHVybDogJ2h0dHA6Ly9leGFtcGxlLmNvbScsIHRva2VuOiAnc29tZS10b2tlbicgfSk7XG4gIC8vICAgY29uc3QgZGF0YXNvdXJjZSA9IG5ldyBSZXN0RGF0YVNvdXJjZSgpO1xuICAvLyAgIGV4cGVjdChkYXRhc291cmNlLmJhc2VVUkwpLnRvRXF1YWwoJ2h0dHA6Ly9leGFtcGxlLmNvbScpO1xuICAvLyAgIGV4cGVjdChkYXRhc291cmNlLnJvY2tUb2tlbikudG9FcXVhbCgnc29tZS10b2tlbicpO1xuICAvLyB9KTtcblxuICBkZXNjcmliZSgndGhlIHBhZ2luYXRlIG1ldGhvZCcsICgpID0+IHtcbiAgICBsZXQgZ2V0O1xuICAgIGxldCBkYXRhU291cmNlO1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgZ2V0ID0gamVzdC5mbigpO1xuICAgICAgZ2V0Lm1vY2tSZXR1cm5WYWx1ZShuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gcmVzb2x2ZShbMSwgMiwgM10pKSk7XG4gICAgICBkYXRhU291cmNlID0gbmV3IFJlc3REYXRhU291cmNlKCk7XG4gICAgICBkYXRhU291cmNlLnJlcXVlc3QgPSAocmVzb3VyY2UpID0+XG4gICAgICAgIG5ldyBSZXF1ZXN0QnVpbGRlcih7XG4gICAgICAgICAgcmVzb3VyY2UsXG4gICAgICAgICAgY29ubmVjdG9yOiB7IGdldCB9LFxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdwYWdpbmF0ZXMgYSBjdXJzb3InLCAoKSA9PiB7XG4gICAgICBjb25zdCBjdXJzb3IgPSBkYXRhU291cmNlLnJlcXVlc3QoJ1Rlc3RSZXNvdXJjZScpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gZGF0YVNvdXJjZS5wYWdpbmF0ZSh7IGN1cnNvciB9KTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChnZXQubW9jay5jYWxsc1swXVswXSkudG9CZSgnVGVzdFJlc291cmNlPyUyNHRvcD0yMCYlMjRza2lwPTAnKTtcbiAgICB9KTtcblxuICAgIGl0KCdza2lwcyBwYWdlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IGN1cnNvciA9IGRhdGFTb3VyY2UucmVxdWVzdCgnVGVzdFJlc291cmNlJyk7XG4gICAgICBjb25zdCBhZnRlciA9IGNyZWF0ZUN1cnNvcih7IHBvc2l0aW9uOiAyNSB9KTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGRhdGFTb3VyY2UucGFnaW5hdGUoeyBjdXJzb3IsIGFyZ3M6IHsgYWZ0ZXIgfSB9KTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChnZXQubW9jay5jYWxsc1swXVswXSkudG9CZSgnVGVzdFJlc291cmNlPyUyNHRvcD0yMCYlMjRza2lwPTI2Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgndGhyb3dzIG9uIGFuIGludmFsaWQgYGFmdGVyYCBjdXJzb3InLCAoKSA9PiB7XG4gICAgICBjb25zdCBjdXJzb3IgPSBkYXRhU291cmNlLnJlcXVlc3QoJ1Rlc3RSZXNvdXJjZScpO1xuICAgICAgY29uc3QgYWZ0ZXIgPSBjcmVhdGVDdXJzb3IoeyBwb3NpdGlvbjogMjUgfSk7XG4gICAgICBjb25zdCByZXN1bHQgPSBkYXRhU291cmNlLnBhZ2luYXRlKHsgY3Vyc29yLCBhcmdzOiB7IGFmdGVyIH0gfSk7XG4gICAgICBleHBlY3QocmVzdWx0KS5yZWplY3RzLnRvVGhyb3coKTtcbiAgICB9KTtcblxuICAgIGl0KCdzZXRzIHBhZ2Ugc2l6ZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGN1cnNvciA9IGRhdGFTb3VyY2UucmVxdWVzdCgnVGVzdFJlc291cmNlJyk7XG4gICAgICBjb25zdCByZXN1bHQgPSBkYXRhU291cmNlLnBhZ2luYXRlKHsgY3Vyc29yLCBhcmdzOiB7IGZpcnN0OiAyIH0gfSk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlVHJ1dGh5KCk7XG4gICAgICBleHBlY3QoZ2V0Lm1vY2suY2FsbHNbMF1bMF0pLnRvQmUoJ1Rlc3RSZXNvdXJjZT8lMjR0b3A9MiYlMjRza2lwPTAnKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==
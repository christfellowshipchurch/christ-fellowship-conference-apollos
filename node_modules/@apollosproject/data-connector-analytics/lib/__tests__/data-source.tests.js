"use strict";

var _universalAnalytics = require("universal-analytics");

var _analyticsNode = _interopRequireWildcard(require("analytics-node"));

var _apolloServer = require("apollo-server");

var _config = _interopRequireDefault(require("@apollosproject/config"));

var _dataSource = _interopRequireDefault(require("../data-source"));

var _rock_interactions = _interopRequireDefault(require("../interfaces/rock_interactions"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const mockCurrentPerson = jest.fn().mockImplementation(() => ({
  id: 5,
  email: 'test@test.com',
  firstName: 'Rick',
  lastName: 'Hampton'
}));

const mockNoPerson = () => {
  throw new _apolloServer.AuthenticationError();
};

const mockOtherError = () => {
  throw new Error('Some other error');
};

const clearMocks = () => {
  [_universalAnalytics.mockUA, _universalAnalytics.mockSend, _universalAnalytics.mockEvent, _analyticsNode.default, _analyticsNode.mockTrack, _analyticsNode.mockIdentify].forEach(mock => {
    mock.mockClear();
  });
};

const AuthWithUser = {
  getCurrentPerson: mockCurrentPerson
};
const AuthWithoutUser = {
  getCurrentPerson: mockNoPerson
};

const buildDataSource = (Auth = AuthWithUser) => {
  const dataSource = new _dataSource.default();
  dataSource.initialize({
    context: {
      dataSources: {
        Auth
      }
    }
  });
  return dataSource;
};

describe('Analytics Data Source', () => {
  beforeEach(() => {
    clearMocks();
    const ANALYTICS = {
      SEGMENT_KEY: 'something',
      GA_ID: 'something-else'
    };

    _config.default.loadJs({
      ANALYTICS
    });
  });
  afterEach(() => {
    _config.default.loadJs({
      ANALYTICS: {
        SEGMENT_KEY: null,
        GA_ID: null
      }
    });
  });
  it('must accept arbitrary interfaces', async () => {
    const track = jest.fn();
    const identify = jest.fn();
    const fakeClient = {
      track,
      identify,
      shouldTrack: true,
      shouldIdentify: true,
      eventWhitelist: null,
      initialize: () => ({})
    };
    const dataSource = new _dataSource.default([fakeClient]);
    dataSource.initialize({
      context: {
        dataSources: {
          Auth: AuthWithUser
        }
      }
    });
    const resultTrack = await dataSource.track({
      anonymousId: 'deviceId5',
      eventName: 'View Content'
    });
    const resultIdentify = await dataSource.identify({
      anonymousId: 'deviceId5'
    });
    expect(resultTrack).toMatchSnapshot();
    expect(track).toHaveBeenCalledTimes(1);
    expect(track).toMatchSnapshot();
    expect(resultIdentify).toMatchSnapshot();
    expect(identify).toHaveBeenCalledTimes(1);
    expect(identify).toMatchSnapshot();
  });
  describe('track', () => {
    it('must track specific events using the Rock adapter', async () => {
      const rockAnalytics = new _rock_interactions.default();
      const dataSource = new _dataSource.default([rockAnalytics]);
      const mockCreateInteraction = jest.fn();
      dataSource.initialize({
        context: {
          sessionId: 'Session:123',
          dataSources: {
            Auth: AuthWithUser,
            Interactions: {
              createContentItemInteraction: mockCreateInteraction
            }
          }
        }
      });
      const result = await dataSource.track({
        eventName: 'View Content',
        properties: [{
          field: 'itemId',
          value: 'Content:123'
        }, {
          field: 'title',
          value: 'Super Cool Content'
        }]
      });
      expect(result).toMatchSnapshot();
      expect(mockCreateInteraction).toHaveBeenCalledTimes(1);
      expect(mockCreateInteraction.mock.calls).toMatchSnapshot();
    });
    it('must not track events using the Rock adapter without required attrs', async () => {
      const rockAnalytics = new _rock_interactions.default();
      const dataSource = new _dataSource.default([rockAnalytics]);
      const mockCreateInteraction = jest.fn();
      dataSource.initialize({
        context: {
          dataSources: {
            Auth: AuthWithUser,
            Interactions: {
              createInteraction: mockCreateInteraction
            }
          }
        }
      }); // Without session id.

      await dataSource.track({
        eventName: 'View Content',
        properties: [{
          field: 'SessionId',
          value: 'Session:123'
        }]
      });
      expect(mockCreateInteraction).toHaveBeenCalledTimes(0); // Without content id.

      await dataSource.track({
        eventName: 'View Content',
        properties: [{
          field: 'ContentId',
          value: 'Content:123'
        }]
      });
      expect(mockCreateInteraction).toHaveBeenCalledTimes(0); // without a current user

      dataSource.context.dataSources.Auth = AuthWithoutUser;
      await dataSource.track({
        eventName: 'View Content',
        properties: [{
          field: 'ContentId',
          value: 'Content:123'
        }, {
          field: 'SessionId',
          value: 'Session:123'
        }]
      });
      expect(mockCreateInteraction).toHaveBeenCalledTimes(0);
      dataSource.context.dataSources.Auth = AuthWithUser; // With an unhandled event

      rockAnalytics.eventWhitelist = ['Some Event'];
      await dataSource.track({
        eventName: 'Some Event',
        properties: [{
          field: 'ContentId',
          value: 'Content:123'
        }, {
          field: 'SessionId',
          value: 'Session:123'
        }]
      });
      expect(mockCreateInteraction).toHaveBeenCalledTimes(0);
    });
    it('must track an event with a name and no properties', async () => {
      const analytics = buildDataSource();
      const result = await analytics.track({
        eventName: 'View Content',
        anonymousId: 'deviceId5'
      });
      expect(result).toMatchSnapshot();
      expect(_analyticsNode.mockTrack).toHaveBeenCalledTimes(1);
      expect(_analyticsNode.mockTrack.mock.calls).toMatchSnapshot();
      expect(_universalAnalytics.mockSend).toHaveBeenCalledTimes(1);
      expect(_universalAnalytics.mockUA).toHaveBeenCalledTimes(1);
      expect(_universalAnalytics.mockUA.mock.calls).toMatchSnapshot();
    });
    it('must not track segment without a key', async () => {
      _config.default.loadJs({
        ANALYTICS: {
          GA_ID: 'something-else',
          SEGMENT_KEY: null
        }
      });

      const analytics = buildDataSource();
      const result = await analytics.track({
        eventName: 'View Content'
      });
      expect(result).toMatchSnapshot();
      expect(_analyticsNode.mockTrack).toHaveBeenCalledTimes(0);
      expect(_universalAnalytics.mockSend).toHaveBeenCalledTimes(1);
      expect(_universalAnalytics.mockUA).toHaveBeenCalledTimes(1);
      expect(_universalAnalytics.mockUA.mock.calls).toMatchSnapshot();
    });
    it('must not track google analytics without a key', async () => {
      _config.default.loadJs({
        ANALYTICS: {
          SEGMENT_KEY: 'something',
          GA_ID: null
        }
      });

      const analytics = buildDataSource();
      const result = await analytics.track({
        eventName: 'View Content'
      });
      expect(result).toMatchSnapshot();
      expect(_analyticsNode.mockTrack).toHaveBeenCalledTimes(1);
      expect(_universalAnalytics.mockSend).toHaveBeenCalledTimes(0);
      expect(_universalAnalytics.mockUA).toHaveBeenCalledTimes(0);
    });
    it('must track an event with a name and properties', async () => {
      const analytics = buildDataSource();
      const result = await analytics.track({
        eventName: 'View Content',
        anonymousId: 'deviceId5',
        properties: [{
          field: 'ContentId',
          value: 7
        }]
      });
      expect(result).toMatchSnapshot();
      expect(_analyticsNode.mockTrack).toHaveBeenCalledTimes(1);
      expect(_analyticsNode.mockTrack.mock.calls).toMatchSnapshot();
      expect(_universalAnalytics.mockSend).toHaveBeenCalledTimes(1);
      expect(_universalAnalytics.mockUA).toHaveBeenCalledTimes(1);
      expect(_universalAnalytics.mockUA.mock.calls).toMatchSnapshot();
    });
    it('must track without a user', async () => {
      const analytics = buildDataSource(AuthWithoutUser);
      const result = await analytics.track({
        eventName: 'View Content'
      });
      expect(result).toMatchSnapshot();
      expect(_analyticsNode.mockTrack).toHaveBeenCalledTimes(1);
      expect(_analyticsNode.mockTrack.mock.calls).toMatchSnapshot();
      expect(_universalAnalytics.mockSend).toHaveBeenCalledTimes(1);
      expect(_universalAnalytics.mockUA).toHaveBeenCalledTimes(1);
      expect(_universalAnalytics.mockUA.mock.calls).toMatchSnapshot();
    });
    it('must reraise a non-auth Error', () => {
      const analytics = buildDataSource({
        getCurrentPerson: mockOtherError
      });
      const result = analytics.track({
        eventName: 'View Content'
      });
      expect(result).rejects.toThrow();
      expect(_universalAnalytics.mockSend).toHaveBeenCalledTimes(0);
      expect(_analyticsNode.mockTrack).toHaveBeenCalledTimes(0);
    });
  });
  describe('identify', () => {
    it('must identify a user without traits', async () => {
      const analytics = buildDataSource();
      const result = await analytics.identify({
        anonymousId: 'deviceId5'
      });
      expect(result).toMatchSnapshot();
      expect(_analyticsNode.mockIdentify).toHaveBeenCalledTimes(1);
      expect(_analyticsNode.mockIdentify.mock.calls).toMatchSnapshot();
      expect(_universalAnalytics.mockUA).toHaveBeenCalledTimes(0);
    });
    it('must identify a user with traits', async () => {
      const analytics = buildDataSource();
      const result = await analytics.identify({
        anonymousId: 'deviceId5',
        traits: [{
          field: 'ChurchRole',
          value: 'Pastor'
        }]
      });
      expect(result).toMatchSnapshot();
      expect(_analyticsNode.mockIdentify).toHaveBeenCalledTimes(1);
      expect(_analyticsNode.mockIdentify.mock.calls).toMatchSnapshot();
      expect(_universalAnalytics.mockUA).toHaveBeenCalledTimes(0);
    });
    it('must identify a user with device info', async () => {
      const analytics = buildDataSource();
      const result = await analytics.identify({
        anonymousId: 'deviceId5',
        deviceInfo: {
          platform: 'iOS',
          deviceId: 'gibberish',
          deviceMode: 'Latest iPhone',
          appVersion: '72.0.1'
        }
      });
      expect(result).toMatchSnapshot();
      expect(_analyticsNode.mockIdentify).toHaveBeenCalledTimes(1);
      expect(_analyticsNode.mockIdentify.mock.calls).toMatchSnapshot();
      expect(_universalAnalytics.mockUA).toHaveBeenCalledTimes(0);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dataSource = void 0;

var _rockApolloDataSource = _interopRequireDefault(require("@apollosproject/rock-apollo-data-source"));

var _config = _interopRequireDefault(require("@apollosproject/config"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const {
  ROCK_MAPPINGS
} = _config.default;

const mapApollosNameToRockName = name => {
  if (ROCK_MAPPINGS.CONTENT_ITEM_TYPES.includes(name)) {
    return 'ContentChannelItem';
  }

  throw new Error(`${name} has not been mapped into a Rock type!`);
};

class RockConstants extends _rockApolloDataSource.default {
  async findOrCreate({
    model,
    objectAttributes
  }) {
    // Turns {ChannelId: 7, Name: 'Something'} into '(ChannelId eq 7) and (Name eq 'Something')'
    const filter = Object.keys(objectAttributes).map(key => {
      if (typeof objectAttributes[key] === 'string') {
        return `(${key} eq '${objectAttributes[key]}')`;
      }

      return `(${key} eq ${objectAttributes[key]})`;
    }).join(' and ');
    const objects = await this.request(model).filter(filter).cache({
      ttl: 86400
    }).get();

    if (objects.length) {
      return objects[0];
    }

    const objectId = await this.post(`/${model}`, objectAttributes);
    const ret = await this.get(`/${model}/${objectId}`);
    console.log('Created', ret);
    return ret;
  }

  async createOrFindInteractionComponent({
    componentName,
    channelId,
    entityId
  }) {
    return this.findOrCreate({
      model: 'InteractionComponents',
      objectAttributes: {
        Name: componentName,
        ChannelId: channelId,
        EntityId: entityId
      }
    });
  }

  async createOrFindInteractionChannel({
    channelName,
    entityTypeId
  }) {
    return this.findOrCreate({
      model: 'InteractionChannels',
      objectAttributes: {
        Name: channelName,
        UsesSession: true,
        IsActive: true,
        ComponentEntityTypeId: entityTypeId,
        ChannelTypeMediumValueId: ROCK_MAPPINGS.INTERACTIONS.CHANNEL_MEDIUM_TYPE_ID
      }
    });
  }

  async contentItemInteractionComponent({
    contentItemId,
    contentName = null
  }) {
    const channel = await this.contentItemInteractionChannel();
    return this.createOrFindInteractionComponent({
      componentName: `${ROCK_MAPPINGS.INTERACTIONS.COMPONENT_NAME} - ${contentName || contentItemId}`,
      channelId: channel.id,
      entityId: parseInt(contentItemId, 10)
    });
  }

  async contentItemInteractionChannel() {
    const {
      id
    } = await this.modelType('ContentItem');
    return this.createOrFindInteractionChannel({
      channelName: ROCK_MAPPINGS.INTERACTIONS.CHANNEL_NAME,
      entityTypeId: id
    });
  }

  async modelType(nameInput) {
    const name = mapApollosNameToRockName(nameInput);
    const types = await this.request('EntityTypes').filter(`Name eq 'Rock.Model.${name}'`).cache({
      ttl: 86400
    }).get();

    if (types.length) {
      return types[0];
    }

    return null;
  }

} // eslint-disable-next-line import/prefer-default-export


exports.dataSource = RockConstants;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
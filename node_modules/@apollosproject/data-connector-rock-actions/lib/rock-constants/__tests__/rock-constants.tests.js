"use strict";

var _apolloServerEnv = require("apollo-server-env");

var _config = _interopRequireDefault(require("@apollosproject/config"));

var _index = require("../index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_config.default.loadJs({
  ROCK_MAPPINGS: {
    CONTENT_ITEM_TYPES: ['ContentItem', 'UniversalContentItem', 'DevotionalContentItem', 'MediaContentItem'],
    INTERACTIONS: {
      CHANNEL_NAME: 'Apollos App',
      COMPONENT_NAME: 'Apollos Content Item',
      CHANNEL_MEDIUM_TYPE_ID: 512
    }
  }
});

const buildGetMock = (response, dataSource) => {
  const get = jest.fn();

  if (Array.isArray(response) && Array.isArray(response[0])) {
    response.forEach(responseVal => {
      get.mockReturnValueOnce(new Promise(resolve => resolve(dataSource.normalize(responseVal))));
    });
  }

  get.mockReturnValue(new Promise(resolve => resolve(dataSource.normalize(response))));
  return get;
};

describe('RockConstants', () => {
  beforeEach(() => {
    _apolloServerEnv.fetch.resetMocks();
  });
  it("creates a Channel if it doesn't exist", async () => {
    const dataSource = new _index.dataSource();
    dataSource.modelType = buildGetMock({
      id: 101
    }, dataSource);
    dataSource.get = buildGetMock([[], {
      Id: 1
    }], dataSource);
    dataSource.post = buildGetMock('1', dataSource);
    const result = await dataSource.contentItemInteractionChannel();
    expect(result).toMatchSnapshot();
    expect(dataSource.modelType.mock.calls).toMatchSnapshot();
    expect(dataSource.get.mock.calls).toMatchSnapshot();
    expect(dataSource.post.mock.calls).toMatchSnapshot();
  });
  it('finds the Channel if it exists', async () => {
    const dataSource = new _index.dataSource();
    dataSource.get = buildGetMock([{
      Id: 1
    }], dataSource);
    dataSource.post = jest.fn();
    const result = await dataSource.contentItemInteractionChannel();
    expect(result).toMatchSnapshot();
    expect(dataSource.get.mock.calls).toMatchSnapshot();
    expect(dataSource.post.mock.calls.length).toBe(0);
  });
  it("creates a Component if it doesn't exist", async () => {
    const dataSource = new _index.dataSource();
    dataSource.modelType = buildGetMock({
      id: 101
    }, dataSource);
    dataSource.get = buildGetMock([[], {
      Id: 1
    }], dataSource);
    dataSource.post = buildGetMock('1', dataSource);
    const result = await dataSource.contentItemInteractionComponent({
      contentItemId: 7,
      contentTitle: 'Some Title'
    });
    expect(result).toMatchSnapshot();
    expect(dataSource.modelType.mock.calls).toMatchSnapshot();
    expect(dataSource.get.mock.calls).toMatchSnapshot();
    expect(dataSource.post.mock.calls).toMatchSnapshot();
  });
  it('finds the Component if it exists', async () => {
    const dataSource = new _index.dataSource();
    dataSource.get = buildGetMock([{
      Id: 1
    }], dataSource);
    dataSource.post = jest.fn();
    const result = await dataSource.contentItemInteractionComponent({
      contentItemId: 7,
      contentTitle: 'Some Title'
    });
    expect(result).toMatchSnapshot();
    expect(dataSource.get.mock.calls).toMatchSnapshot();
    expect(dataSource.post.mock.calls.length).toBe(0);
  });
  it('finds a ContentItem model ID', async () => {
    const dataSource = new _index.dataSource();
    dataSource.get = buildGetMock([{
      Id: 1
    }], dataSource);
    const result = await dataSource.modelType('ContentItem');
    expect(result).toMatchSnapshot();
    expect(dataSource.get.mock.calls).toMatchSnapshot();
  });
  it('finds a UniversalContentItem model ID', async () => {
    const dataSource = new _index.dataSource();
    dataSource.get = buildGetMock([{
      Id: 1
    }], dataSource);
    const result = await dataSource.modelType('UniversalContentItem');
    expect(result).toMatchSnapshot();
    expect(dataSource.get.mock.calls).toMatchSnapshot();
  });
  it('Throws when finding an unknown model ', () => {
    const dataSource = new _index.dataSource();
    dataSource.get = buildGetMock([{
      Id: 1
    }], dataSource);
    const prom = dataSource.modelType('IDontExist');
    expect(prom).rejects.toEqual(new Error('IDontExist has not been mapped into a Rock type!'));
  });
  it('Returns null if model type not found ', async () => {
    const dataSource = new _index.dataSource();
    dataSource.get = buildGetMock([], dataSource);
    const result = await dataSource.modelType('ContentItem');
    expect(result).toEqual(null);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
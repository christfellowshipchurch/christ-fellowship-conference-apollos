"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _serverCore = require("@apollosproject/server-core");

const defaultContentItemResolvers = {
  likedCount: ({
    id
  }, args, {
    dataSources
  }) => dataSources.Followings.getFollowingsCountByNodeId({
    nodeId: (0, _serverCore.createGlobalId)(id, 'ContentItem')
  }),
  isLiked: async ({
    id,
    isLiked
  }, args, {
    dataSources
  }) => {
    if (isLiked != null) return isLiked;
    const followings = await dataSources.Followings.getFollowingsForCurrentUserAndNode({
      nodeId: (0, _serverCore.createGlobalId)(id, 'ContentItem')
    });
    return followings.length > 0;
  }
};
const resolvers = {
  Mutation: {
    updateLikeEntity: async (root, {
      input: {
        nodeId,
        operation
      }
    }, {
      dataSources
    }) => dataSources.Followings.updateLikeContentItem({
      nodeId,
      operation
    })
  },
  Query: {
    getAllLikedContent: async (root, args, {
      dataSources
    }) => {
      const followings = await dataSources.Followings.getFollowingsForCurrentUser({
        type: 'ContentItem'
      });
      const ids = followings.map(f => f.entityId);
      const contentItems = await dataSources.ContentItem.getFromIds(ids).get();
      const sortedContentItems = contentItems.sort((a, b) => {
        const followA = followings.find(f => f.entityId === a.id);
        const followB = followings.find(f => f.entityId === b.id);
        return new Date(followA.createdDateTime) < new Date(followB.createdDateTime);
      });
      return sortedContentItems.map(i => ({ ...i,
        isLiked: true
      }));
    }
  },
  UniversalContentItem: defaultContentItemResolvers,
  DevotionalContentItem: defaultContentItemResolvers,
  ContentSeriesContentItem: defaultContentItemResolvers,
  MediaContentItem: defaultContentItemResolvers
};
exports.default = resolvers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mb2xsb3dpbmdzL3Jlc29sdmVyLmpzIl0sIm5hbWVzIjpbImRlZmF1bHRDb250ZW50SXRlbVJlc29sdmVycyIsImxpa2VkQ291bnQiLCJpZCIsImFyZ3MiLCJkYXRhU291cmNlcyIsIkZvbGxvd2luZ3MiLCJnZXRGb2xsb3dpbmdzQ291bnRCeU5vZGVJZCIsIm5vZGVJZCIsImlzTGlrZWQiLCJmb2xsb3dpbmdzIiwiZ2V0Rm9sbG93aW5nc0ZvckN1cnJlbnRVc2VyQW5kTm9kZSIsImxlbmd0aCIsInJlc29sdmVycyIsIk11dGF0aW9uIiwidXBkYXRlTGlrZUVudGl0eSIsInJvb3QiLCJpbnB1dCIsIm9wZXJhdGlvbiIsInVwZGF0ZUxpa2VDb250ZW50SXRlbSIsIlF1ZXJ5IiwiZ2V0QWxsTGlrZWRDb250ZW50IiwiZ2V0Rm9sbG93aW5nc0ZvckN1cnJlbnRVc2VyIiwidHlwZSIsImlkcyIsIm1hcCIsImYiLCJlbnRpdHlJZCIsImNvbnRlbnRJdGVtcyIsIkNvbnRlbnRJdGVtIiwiZ2V0RnJvbUlkcyIsImdldCIsInNvcnRlZENvbnRlbnRJdGVtcyIsInNvcnQiLCJhIiwiYiIsImZvbGxvd0EiLCJmaW5kIiwiZm9sbG93QiIsIkRhdGUiLCJjcmVhdGVkRGF0ZVRpbWUiLCJpIiwiVW5pdmVyc2FsQ29udGVudEl0ZW0iLCJEZXZvdGlvbmFsQ29udGVudEl0ZW0iLCJDb250ZW50U2VyaWVzQ29udGVudEl0ZW0iLCJNZWRpYUNvbnRlbnRJdGVtIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUEsTUFBTUEsMkJBQTJCLEdBQUc7QUFDbENDLEVBQUFBLFVBQVUsRUFBRSxDQUFDO0FBQUVDLElBQUFBO0FBQUYsR0FBRCxFQUFTQyxJQUFULEVBQWU7QUFBRUMsSUFBQUE7QUFBRixHQUFmLEtBQ1ZBLFdBQVcsQ0FBQ0MsVUFBWixDQUF1QkMsMEJBQXZCLENBQWtEO0FBQ2hEQyxJQUFBQSxNQUFNLEVBQUUsZ0NBQWVMLEVBQWYsRUFBbUIsYUFBbkI7QUFEd0MsR0FBbEQsQ0FGZ0M7QUFNbENNLEVBQUFBLE9BQU8sRUFBRSxPQUFPO0FBQUVOLElBQUFBLEVBQUY7QUFBTU0sSUFBQUE7QUFBTixHQUFQLEVBQXdCTCxJQUF4QixFQUE4QjtBQUFFQyxJQUFBQTtBQUFGLEdBQTlCLEtBQWtEO0FBQ3pELFFBQUlJLE9BQU8sSUFBSSxJQUFmLEVBQXFCLE9BQU9BLE9BQVA7QUFFckIsVUFBTUMsVUFBVSxHQUFHLE1BQU1MLFdBQVcsQ0FBQ0MsVUFBWixDQUF1Qkssa0NBQXZCLENBQ3ZCO0FBQ0VILE1BQUFBLE1BQU0sRUFBRSxnQ0FBZUwsRUFBZixFQUFtQixhQUFuQjtBQURWLEtBRHVCLENBQXpCO0FBTUEsV0FBT08sVUFBVSxDQUFDRSxNQUFYLEdBQW9CLENBQTNCO0FBQ0Q7QUFoQmlDLENBQXBDO0FBbUJBLE1BQU1DLFNBQVMsR0FBRztBQUNoQkMsRUFBQUEsUUFBUSxFQUFFO0FBQ1JDLElBQUFBLGdCQUFnQixFQUFFLE9BQ2hCQyxJQURnQixFQUVoQjtBQUFFQyxNQUFBQSxLQUFLLEVBQUU7QUFBRVQsUUFBQUEsTUFBRjtBQUFVVSxRQUFBQTtBQUFWO0FBQVQsS0FGZ0IsRUFHaEI7QUFBRWIsTUFBQUE7QUFBRixLQUhnQixLQUtoQkEsV0FBVyxDQUFDQyxVQUFaLENBQXVCYSxxQkFBdkIsQ0FBNkM7QUFDM0NYLE1BQUFBLE1BRDJDO0FBRTNDVSxNQUFBQTtBQUYyQyxLQUE3QztBQU5NLEdBRE07QUFZaEJFLEVBQUFBLEtBQUssRUFBRTtBQUNMQyxJQUFBQSxrQkFBa0IsRUFBRSxPQUFPTCxJQUFQLEVBQWFaLElBQWIsRUFBbUI7QUFBRUMsTUFBQUE7QUFBRixLQUFuQixLQUF1QztBQUN6RCxZQUFNSyxVQUFVLEdBQUcsTUFBTUwsV0FBVyxDQUFDQyxVQUFaLENBQXVCZ0IsMkJBQXZCLENBQ3ZCO0FBQUVDLFFBQUFBLElBQUksRUFBRTtBQUFSLE9BRHVCLENBQXpCO0FBR0EsWUFBTUMsR0FBRyxHQUFHZCxVQUFVLENBQUNlLEdBQVgsQ0FBZ0JDLENBQUQsSUFBT0EsQ0FBQyxDQUFDQyxRQUF4QixDQUFaO0FBQ0EsWUFBTUMsWUFBWSxHQUFHLE1BQU12QixXQUFXLENBQUN3QixXQUFaLENBQXdCQyxVQUF4QixDQUFtQ04sR0FBbkMsRUFBd0NPLEdBQXhDLEVBQTNCO0FBQ0EsWUFBTUMsa0JBQWtCLEdBQUdKLFlBQVksQ0FBQ0ssSUFBYixDQUFrQixDQUFDQyxDQUFELEVBQUlDLENBQUosS0FBVTtBQUNyRCxjQUFNQyxPQUFPLEdBQUcxQixVQUFVLENBQUMyQixJQUFYLENBQWlCWCxDQUFELElBQU9BLENBQUMsQ0FBQ0MsUUFBRixLQUFlTyxDQUFDLENBQUMvQixFQUF4QyxDQUFoQjtBQUNBLGNBQU1tQyxPQUFPLEdBQUc1QixVQUFVLENBQUMyQixJQUFYLENBQWlCWCxDQUFELElBQU9BLENBQUMsQ0FBQ0MsUUFBRixLQUFlUSxDQUFDLENBQUNoQyxFQUF4QyxDQUFoQjtBQUNBLGVBQ0UsSUFBSW9DLElBQUosQ0FBU0gsT0FBTyxDQUFDSSxlQUFqQixJQUFvQyxJQUFJRCxJQUFKLENBQVNELE9BQU8sQ0FBQ0UsZUFBakIsQ0FEdEM7QUFHRCxPQU4wQixDQUEzQjtBQVFBLGFBQU9SLGtCQUFrQixDQUFDUCxHQUFuQixDQUF3QmdCLENBQUQsS0FBUSxFQUFFLEdBQUdBLENBQUw7QUFBUWhDLFFBQUFBLE9BQU8sRUFBRTtBQUFqQixPQUFSLENBQXZCLENBQVA7QUFDRDtBQWhCSSxHQVpTO0FBOEJoQmlDLEVBQUFBLG9CQUFvQixFQUFFekMsMkJBOUJOO0FBK0JoQjBDLEVBQUFBLHFCQUFxQixFQUFFMUMsMkJBL0JQO0FBZ0NoQjJDLEVBQUFBLHdCQUF3QixFQUFFM0MsMkJBaENWO0FBaUNoQjRDLEVBQUFBLGdCQUFnQixFQUFFNUM7QUFqQ0YsQ0FBbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVHbG9iYWxJZCB9IGZyb20gJ0BhcG9sbG9zcHJvamVjdC9zZXJ2ZXItY29yZSc7XG5cbmNvbnN0IGRlZmF1bHRDb250ZW50SXRlbVJlc29sdmVycyA9IHtcbiAgbGlrZWRDb3VudDogKHsgaWQgfSwgYXJncywgeyBkYXRhU291cmNlcyB9KSA9PlxuICAgIGRhdGFTb3VyY2VzLkZvbGxvd2luZ3MuZ2V0Rm9sbG93aW5nc0NvdW50QnlOb2RlSWQoe1xuICAgICAgbm9kZUlkOiBjcmVhdGVHbG9iYWxJZChpZCwgJ0NvbnRlbnRJdGVtJyksXG4gICAgfSksXG5cbiAgaXNMaWtlZDogYXN5bmMgKHsgaWQsIGlzTGlrZWQgfSwgYXJncywgeyBkYXRhU291cmNlcyB9KSA9PiB7XG4gICAgaWYgKGlzTGlrZWQgIT0gbnVsbCkgcmV0dXJuIGlzTGlrZWQ7XG5cbiAgICBjb25zdCBmb2xsb3dpbmdzID0gYXdhaXQgZGF0YVNvdXJjZXMuRm9sbG93aW5ncy5nZXRGb2xsb3dpbmdzRm9yQ3VycmVudFVzZXJBbmROb2RlKFxuICAgICAge1xuICAgICAgICBub2RlSWQ6IGNyZWF0ZUdsb2JhbElkKGlkLCAnQ29udGVudEl0ZW0nKSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgcmV0dXJuIGZvbGxvd2luZ3MubGVuZ3RoID4gMDtcbiAgfSxcbn07XG5cbmNvbnN0IHJlc29sdmVycyA9IHtcbiAgTXV0YXRpb246IHtcbiAgICB1cGRhdGVMaWtlRW50aXR5OiBhc3luYyAoXG4gICAgICByb290LFxuICAgICAgeyBpbnB1dDogeyBub2RlSWQsIG9wZXJhdGlvbiB9IH0sXG4gICAgICB7IGRhdGFTb3VyY2VzIH1cbiAgICApID0+XG4gICAgICBkYXRhU291cmNlcy5Gb2xsb3dpbmdzLnVwZGF0ZUxpa2VDb250ZW50SXRlbSh7XG4gICAgICAgIG5vZGVJZCxcbiAgICAgICAgb3BlcmF0aW9uLFxuICAgICAgfSksXG4gIH0sXG4gIFF1ZXJ5OiB7XG4gICAgZ2V0QWxsTGlrZWRDb250ZW50OiBhc3luYyAocm9vdCwgYXJncywgeyBkYXRhU291cmNlcyB9KSA9PiB7XG4gICAgICBjb25zdCBmb2xsb3dpbmdzID0gYXdhaXQgZGF0YVNvdXJjZXMuRm9sbG93aW5ncy5nZXRGb2xsb3dpbmdzRm9yQ3VycmVudFVzZXIoXG4gICAgICAgIHsgdHlwZTogJ0NvbnRlbnRJdGVtJyB9XG4gICAgICApO1xuICAgICAgY29uc3QgaWRzID0gZm9sbG93aW5ncy5tYXAoKGYpID0+IGYuZW50aXR5SWQpO1xuICAgICAgY29uc3QgY29udGVudEl0ZW1zID0gYXdhaXQgZGF0YVNvdXJjZXMuQ29udGVudEl0ZW0uZ2V0RnJvbUlkcyhpZHMpLmdldCgpO1xuICAgICAgY29uc3Qgc29ydGVkQ29udGVudEl0ZW1zID0gY29udGVudEl0ZW1zLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgY29uc3QgZm9sbG93QSA9IGZvbGxvd2luZ3MuZmluZCgoZikgPT4gZi5lbnRpdHlJZCA9PT0gYS5pZCk7XG4gICAgICAgIGNvbnN0IGZvbGxvd0IgPSBmb2xsb3dpbmdzLmZpbmQoKGYpID0+IGYuZW50aXR5SWQgPT09IGIuaWQpO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIG5ldyBEYXRlKGZvbGxvd0EuY3JlYXRlZERhdGVUaW1lKSA8IG5ldyBEYXRlKGZvbGxvd0IuY3JlYXRlZERhdGVUaW1lKVxuICAgICAgICApO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBzb3J0ZWRDb250ZW50SXRlbXMubWFwKChpKSA9PiAoeyAuLi5pLCBpc0xpa2VkOiB0cnVlIH0pKTtcbiAgICB9LFxuICB9LFxuICBVbml2ZXJzYWxDb250ZW50SXRlbTogZGVmYXVsdENvbnRlbnRJdGVtUmVzb2x2ZXJzLFxuICBEZXZvdGlvbmFsQ29udGVudEl0ZW06IGRlZmF1bHRDb250ZW50SXRlbVJlc29sdmVycyxcbiAgQ29udGVudFNlcmllc0NvbnRlbnRJdGVtOiBkZWZhdWx0Q29udGVudEl0ZW1SZXNvbHZlcnMsXG4gIE1lZGlhQ29udGVudEl0ZW06IGRlZmF1bHRDb250ZW50SXRlbVJlc29sdmVycyxcbn07XG5cbmV4cG9ydCB7IHJlc29sdmVycyBhcyBkZWZhdWx0IH07XG4iXX0=
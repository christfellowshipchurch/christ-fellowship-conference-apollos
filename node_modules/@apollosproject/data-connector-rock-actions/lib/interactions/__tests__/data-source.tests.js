"use strict";

var _apolloServerEnv = require("apollo-server-env");

var _config = _interopRequireDefault(require("@apollosproject/config"));

var _serverCore = require("@apollosproject/server-core");

var _index = require("../index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_config.default.loadJs({
  ROCK: {
    API_URL: 'https://apollosrock.newspring.cc/api',
    API_TOKEN: 'some-rock-token',
    IMAGE_URL: 'https://apollosrock.newspring.cc/GetImage.ashx'
  },
  APP: {
    DEEP_LINK_HOST: 'apolloschurch'
  }
});

const buildGetMock = response => {
  const dataSource = new _index.dataSource();
  const get = jest.fn();

  if (Array.isArray(response) && Array.isArray(response[0])) {
    response.forEach(responseVal => {
      get.mockReturnValueOnce(new Promise(resolve => resolve(dataSource.normalize(responseVal))));
    });
  }

  get.mockReturnValue(new Promise(resolve => resolve(dataSource.normalize(response))));
  return get;
};

const context = {
  dataSources: {
    RockConstants: {
      modelType: buildGetMock({
        Id: 123
      }),
      contentItemInteractionComponent: buildGetMock({
        Id: 789
      })
    },
    Auth: {
      getCurrentPerson: buildGetMock({
        Id: 456,
        PrimaryAliasId: 456
      })
    }
  }
};
describe('Interactions', () => {
  beforeEach(() => {
    _apolloServerEnv.fetch.resetMocks();
  });
  it('creates a new interaction', async () => {
    const dataSource = new _index.dataSource();
    dataSource.initialize({
      context
    });
    dataSource.get = buildGetMock({
      Id: 1
    });
    dataSource.post = buildGetMock('1');
    const result = await dataSource.createContentItemInteraction({
      itemId: (0, _serverCore.createGlobalId)(1, 'UniversalContentItem'),
      operationName: 'Like',
      itemTitle: 'Super Cool Content'
    });
    delete dataSource.post.mock.calls[0][1].InteractionDateTime;
    expect(result).toMatchSnapshot();
    expect(dataSource.get.mock.calls).toMatchSnapshot();
    expect(dataSource.post.mock.calls).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pbnRlcmFjdGlvbnMvX190ZXN0c19fL2RhdGEtc291cmNlLnRlc3RzLmpzIl0sIm5hbWVzIjpbIkFwb2xsb3NDb25maWciLCJsb2FkSnMiLCJST0NLIiwiQVBJX1VSTCIsIkFQSV9UT0tFTiIsIklNQUdFX1VSTCIsIkFQUCIsIkRFRVBfTElOS19IT1NUIiwiYnVpbGRHZXRNb2NrIiwicmVzcG9uc2UiLCJkYXRhU291cmNlIiwiSW50ZXJhY3Rpb25zIiwiZ2V0IiwiamVzdCIsImZuIiwiQXJyYXkiLCJpc0FycmF5IiwiZm9yRWFjaCIsInJlc3BvbnNlVmFsIiwibW9ja1JldHVyblZhbHVlT25jZSIsIlByb21pc2UiLCJyZXNvbHZlIiwibm9ybWFsaXplIiwibW9ja1JldHVyblZhbHVlIiwiY29udGV4dCIsImRhdGFTb3VyY2VzIiwiUm9ja0NvbnN0YW50cyIsIm1vZGVsVHlwZSIsIklkIiwiY29udGVudEl0ZW1JbnRlcmFjdGlvbkNvbXBvbmVudCIsIkF1dGgiLCJnZXRDdXJyZW50UGVyc29uIiwiUHJpbWFyeUFsaWFzSWQiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJmZXRjaCIsInJlc2V0TW9ja3MiLCJpdCIsImluaXRpYWxpemUiLCJwb3N0IiwicmVzdWx0IiwiY3JlYXRlQ29udGVudEl0ZW1JbnRlcmFjdGlvbiIsIml0ZW1JZCIsIm9wZXJhdGlvbk5hbWUiLCJpdGVtVGl0bGUiLCJtb2NrIiwiY2FsbHMiLCJJbnRlcmFjdGlvbkRhdGVUaW1lIiwiZXhwZWN0IiwidG9NYXRjaFNuYXBzaG90Il0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUFBLGdCQUFjQyxNQUFkLENBQXFCO0FBQ25CQyxFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsT0FBTyxFQUFFLHNDQURMO0FBRUpDLElBQUFBLFNBQVMsRUFBRSxpQkFGUDtBQUdKQyxJQUFBQSxTQUFTLEVBQUU7QUFIUCxHQURhO0FBTW5CQyxFQUFB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LGVBQW5DO0FBQ0QsR0FmQyxDQUFGO0FBZ0JELENBckJPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmZXRjaCB9IGZyb20gJ2Fwb2xsby1zZXJ2ZXItZW52JztcbmltcG9ydCBBcG9sbG9zQ29uZmlnIGZyb20gJ0BhcG9sbG9zcHJvamVjdC9jb25maWcnO1xuaW1wb3J0IHsgY3JlYXRlR2xvYmFsSWQgfSBmcm9tICdAYXBvbGxvc3Byb2plY3Qvc2VydmVyLWNvcmUnO1xuaW1wb3J0IHsgZGF0YVNvdXJjZSBhcyBJbnRlcmFjdGlvbnMgfSBmcm9tICcuLi9pbmRleCc7XG5cbkFwb2xsb3NDb25maWcubG9hZEpzKHtcbiAgUk9DSzoge1xuICAgIEFQSV9VUkw6ICdodHRwczovL2Fwb2xsb3Nyb2NrLm5ld3NwcmluZy5jYy9hcGknLFxuICAgIEFQSV9UT0tFTjogJ3NvbWUtcm9jay10b2tlbicsXG4gICAgSU1BR0VfVVJMOiAnaHR0cHM6Ly9hcG9sbG9zcm9jay5uZXdzcHJpbmcuY2MvR2V0SW1hZ2UuYXNoeCcsXG4gIH0sXG4gIEFQUDoge1xuICAgIERFRVBfTElOS19IT1NUOiAnYXBvbGxvc2NodXJjaCcsXG4gIH0sXG59KTtcblxuY29uc3QgYnVpbGRHZXRNb2NrID0gKHJlc3BvbnNlKSA9PiB7XG4gIGNvbnN0IGRhdGFTb3VyY2UgPSBuZXcgSW50ZXJhY3Rpb25zKCk7XG4gIGNvbnN0IGdldCA9IGplc3QuZm4oKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocmVzcG9uc2UpICYmIEFycmF5LmlzQXJyYXkocmVzcG9uc2VbMF0pKSB7XG4gICAgcmVzcG9uc2UuZm9yRWFjaCgocmVzcG9uc2VWYWwpID0+IHtcbiAgICAgIGdldC5tb2NrUmV0dXJuVmFsdWVPbmNlKFxuICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gcmVzb2x2ZShkYXRhU291cmNlLm5vcm1hbGl6ZShyZXNwb25zZVZhbCkpKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuICBnZXQubW9ja1JldHVyblZhbHVlKFxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiByZXNvbHZlKGRhdGFTb3VyY2Uubm9ybWFsaXplKHJlc3BvbnNlKSkpXG4gICk7XG4gIHJldHVybiBnZXQ7XG59O1xuXG5jb25zdCBjb250ZXh0ID0ge1xuICBkYXRhU291cmNlczoge1xuICAgIFJvY2tDb25zdGFudHM6IHtcbiAgICAgIG1vZGVsVHlwZTogYnVpbGRHZXRNb2NrKHsgSWQ6IDEyMyB9KSxcbiAgICAgIGNvbnRlbnRJdGVtSW50ZXJhY3Rpb25Db21wb25lbnQ6IGJ1aWxkR2V0TW9jayh7IElkOiA3ODkgfSksXG4gICAgfSxcbiAgICBBdXRoOiB7XG4gICAgICBnZXRDdXJyZW50UGVyc29uOiBidWlsZEdldE1vY2soeyBJZDogNDU2LCBQcmltYXJ5QWxpYXNJZDogNDU2IH0pLFxuICAgIH0sXG4gIH0sXG59O1xuXG5kZXNjcmliZSgnSW50ZXJhY3Rpb25zJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBmZXRjaC5yZXNldE1vY2tzKCk7XG4gIH0pO1xuXG4gIGl0KCdjcmVhdGVzIGEgbmV3IGludGVyYWN0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGRhdGFTb3VyY2UgPSBuZXcgSW50ZXJhY3Rpb25zKCk7XG4gICAgZGF0YVNvdXJjZS5pbml0aWFsaXplKHsgY29udGV4dCB9KTtcbiAgICBkYXRhU291cmNlLmdldCA9IGJ1aWxkR2V0TW9jayh7IElkOiAxIH0pO1xuICAgIGRhdGFTb3VyY2UucG9zdCA9IGJ1aWxkR2V0TW9jaygnMScpO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGF0YVNvdXJjZS5jcmVhdGVDb250ZW50SXRlbUludGVyYWN0aW9uKHtcbiAgICAgIGl0ZW1JZDogY3JlYXRlR2xvYmFsSWQoMSwgJ1VuaXZlcnNhbENvbnRlbnRJdGVtJyksXG4gICAgICBvcGVyYXRpb25OYW1lOiAnTGlrZScsXG4gICAgICBpdGVtVGl0bGU6ICdTdXBlciBDb29sIENvbnRlbnQnLFxuICAgIH0pO1xuICAgIGRlbGV0ZSBkYXRhU291cmNlLnBvc3QubW9jay5jYWxsc1swXVsxXS5JbnRlcmFjdGlvbkRhdGVUaW1lO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIGV4cGVjdChkYXRhU291cmNlLmdldC5tb2NrLmNhbGxzKS50b01hdGNoU25hcHNob3QoKTtcbiAgICBleHBlY3QoZGF0YVNvdXJjZS5wb3N0Lm1vY2suY2FsbHMpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICB9KTtcbn0pO1xuIl19
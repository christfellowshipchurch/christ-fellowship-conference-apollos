"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _serverCore = require("@apollosproject/server-core");

var _rockApolloDataSource = _interopRequireDefault(require("@apollosproject/rock-apollo-data-source"));

var _config = _interopRequireDefault(require("@apollosproject/config"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Interactions extends _rockApolloDataSource.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "resource", 'Interactions');
  }

  async createContentItemInteraction({
    itemId,
    operationName,
    itemTitle
  }) {
    const {
      dataSources: {
        RockConstants,
        Auth
      }
    } = this.context;
    const {
      id
    } = (0, _serverCore.parseGlobalId)(itemId);
    const interactionComponent = await RockConstants.contentItemInteractionComponent({
      contentItemId: id,
      // Don't want to recreate channels if name changes
      // In the future, we could use itemTitle here.
      contentName: id
    });
    const currentUser = await Auth.getCurrentPerson();
    const interactionId = await this.post('/Interactions', {
      PersonAliasId: currentUser.primaryAliasId,
      InteractionComponentId: interactionComponent.id,
      InteractionSessionId: this.context.sessionId,
      Operation: operationName,
      InteractionDateTime: new Date().toJSON(),
      InteractionSummary: `${operationName} - ${itemTitle}`,
      InteractionData: `${_config.default.APP.DEEP_LINK_HOST}://Interactions/ContentSingle?itemId=${itemId}`
    });
    return this.get(`/Interactions/${interactionId}`);
  }

}

exports.default = Interactions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnRlcmFjdGlvbnMvZGF0YS1zb3VyY2UuanMiXSwibmFtZXMiOlsiSW50ZXJhY3Rpb25zIiwiUm9ja0Fwb2xsb0RhdGFTb3VyY2UiLCJjcmVhdGVDb250ZW50SXRlbUludGVyYWN0aW9uIiwiaXRlbUlkIiwib3BlcmF0aW9uTmFtZSIsIml0ZW1UaXRsZSIsImRhdGFTb3VyY2VzIiwiUm9ja0NvbnN0YW50cyIsIkF1dGgiLCJjb250ZXh0IiwiaWQiLCJpbnRlcmFjdGlvbkNvbXBvbmVudCIsImNvbnRlbnRJdGVtSW50ZXJhY3Rpb25Db21wb25lbnQiLCJjb250ZW50SXRlbUlkIiwiY29udGVudE5hbWUiLCJjdXJyZW50VXNlciIsImdldEN1cnJlbnRQZXJzb24iLCJpbnRlcmFjdGlvbklkIiwicG9zdCIsIlBlcnNvbkFsaWFzSWQiLCJwcmltYXJ5QWxpYXNJZCIsIkludGVyYWN0aW9uQ29tcG9uZW50SWQiLCJJbnRlcmFjdGlvblNlc3Npb25JZCIsInNlc3Npb25JZCIsIk9wZXJhdGlvbiIsIkludGVyYWN0aW9uRGF0ZVRpbWUiLCJEYXRlIiwidG9KU09OIiwiSW50ZXJhY3Rpb25TdW1tYXJ5IiwiSW50ZXJhY3Rpb25EYXRhIiwiQXBvbGxvc0NvbmZpZyIsIkFQUCIsIkRFRVBfTElOS19IT1NUIiwiZ2V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVlLE1BQU1BLFlBQU4sU0FBMkJDLDZCQUEzQixDQUFnRDtBQUFBO0FBQUE7O0FBQUEsc0NBQ2xELGNBRGtEO0FBQUE7O0FBRzdELFFBQU1DLDRCQUFOLENBQW1DO0FBQUVDLElBQUFBLE1BQUY7QUFBVUMsSUFBQUEsYUFBVjtBQUF5QkMsSUFBQUE7QUFBekIsR0FBbkMsRUFBeUU7QUFDdkUsVUFBTTtBQUNKQyxNQUFBQSxXQUFXLEVBQUU7QUFBRUMsUUFBQUEsYUFBRjtBQUFpQkMsUUFBQUE7QUFBakI7QUFEVCxRQUVGLEtBQUtDLE9BRlQ7QUFHQSxVQUFNO0FBQUVDLE1BQUFBO0FBQUYsUUFBUywrQkFBY1AsTUFBZCxDQUFmO0FBRUEsVUFBTVEsb0JBQW9CLEdBQUcsTUFBTUosYUFBYSxDQUFDSywrQkFBZCxDQUNqQztBQUNFQyxNQUFBQSxhQUFhLEVBQUVILEVBRGpCO0FBRUU7QUFDQTtBQUNBSSxNQUFBQSxXQUFXLEVBQUVKO0FBSmYsS0FEaUMsQ0FBbkM7QUFRQSxVQUFNSyxXQUFXLEdBQUcsTUFBTVAsSUFBSSxDQUFDUSxnQkFBTCxFQUExQjtBQUNBLFVBQU1DLGFBQWEsR0FBRyxNQUFNLEtBQUtDLElBQUwsQ0FBVSxlQUFWLEVBQTJCO0FBQ3JEQyxNQUFBQSxhQUFhLEVBQUVKLFdBQVcsQ0FBQ0ssY0FEMEI7QUFFckRDLE1BQUFBLHNCQUFzQixFQUFFVixvQkFBb0IsQ0FBQ0QsRUFGUTtBQUdyRFksTUFBQUEsb0JBQW9CLEVBQUUsS0FBS2IsT0FBTCxDQUFhYyxTQUhrQjtBQUlyREMsTUFBQUEsU0FBUyxFQUFFcEIsYUFKMEM7QUFLckRxQixNQUFBQSxtQkFBbUIsRUFBRSxJQUFJQyxJQUFKLEdBQVdDLE1BQVgsRUFMZ0M7QUFNckRDLE1BQUFBLGtCQUFrQixFQUFHLEdBQUV4QixhQUFjLE1BQUtDLFNBQVUsRUFOQztBQU9yRHdCLE1BQUFBLGVBQWUsRUFBRyxHQUNoQkMsZ0JBQWNDLEdBQWQsQ0FBa0JDLGNBQ25CLHdDQUF1QzdCLE1BQU87QUFUTSxLQUEzQixDQUE1QjtBQVlBLFdBQU8sS0FBSzhCLEdBQUwsQ0FBVSxpQkFBZ0JoQixhQUFjLEVBQXhDLENBQVA7QUFDRDs7QUEvQjREIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VHbG9iYWxJZCB9IGZyb20gJ0BhcG9sbG9zcHJvamVjdC9zZXJ2ZXItY29yZSc7XG5pbXBvcnQgUm9ja0Fwb2xsb0RhdGFTb3VyY2UgZnJvbSAnQGFwb2xsb3Nwcm9qZWN0L3JvY2stYXBvbGxvLWRhdGEtc291cmNlJztcbmltcG9ydCBBcG9sbG9zQ29uZmlnIGZyb20gJ0BhcG9sbG9zcHJvamVjdC9jb25maWcnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnRlcmFjdGlvbnMgZXh0ZW5kcyBSb2NrQXBvbGxvRGF0YVNvdXJjZSB7XG4gIHJlc291cmNlID0gJ0ludGVyYWN0aW9ucyc7XG5cbiAgYXN5bmMgY3JlYXRlQ29udGVudEl0ZW1JbnRlcmFjdGlvbih7IGl0ZW1JZCwgb3BlcmF0aW9uTmFtZSwgaXRlbVRpdGxlIH0pIHtcbiAgICBjb25zdCB7XG4gICAgICBkYXRhU291cmNlczogeyBSb2NrQ29uc3RhbnRzLCBBdXRoIH0sXG4gICAgfSA9IHRoaXMuY29udGV4dDtcbiAgICBjb25zdCB7IGlkIH0gPSBwYXJzZUdsb2JhbElkKGl0ZW1JZCk7XG5cbiAgICBjb25zdCBpbnRlcmFjdGlvbkNvbXBvbmVudCA9IGF3YWl0IFJvY2tDb25zdGFudHMuY29udGVudEl0ZW1JbnRlcmFjdGlvbkNvbXBvbmVudChcbiAgICAgIHtcbiAgICAgICAgY29udGVudEl0ZW1JZDogaWQsXG4gICAgICAgIC8vIERvbid0IHdhbnQgdG8gcmVjcmVhdGUgY2hhbm5lbHMgaWYgbmFtZSBjaGFuZ2VzXG4gICAgICAgIC8vIEluIHRoZSBmdXR1cmUsIHdlIGNvdWxkIHVzZSBpdGVtVGl0bGUgaGVyZS5cbiAgICAgICAgY29udGVudE5hbWU6IGlkLFxuICAgICAgfVxuICAgICk7XG4gICAgY29uc3QgY3VycmVudFVzZXIgPSBhd2FpdCBBdXRoLmdldEN1cnJlbnRQZXJzb24oKTtcbiAgICBjb25zdCBpbnRlcmFjdGlvbklkID0gYXdhaXQgdGhpcy5wb3N0KCcvSW50ZXJhY3Rpb25zJywge1xuICAgICAgUGVyc29uQWxpYXNJZDogY3VycmVudFVzZXIucHJpbWFyeUFsaWFzSWQsXG4gICAgICBJbnRlcmFjdGlvbkNvbXBvbmVudElkOiBpbnRlcmFjdGlvbkNvbXBvbmVudC5pZCxcbiAgICAgIEludGVyYWN0aW9uU2Vzc2lvbklkOiB0aGlzLmNvbnRleHQuc2Vzc2lvbklkLFxuICAgICAgT3BlcmF0aW9uOiBvcGVyYXRpb25OYW1lLFxuICAgICAgSW50ZXJhY3Rpb25EYXRlVGltZTogbmV3IERhdGUoKS50b0pTT04oKSxcbiAgICAgIEludGVyYWN0aW9uU3VtbWFyeTogYCR7b3BlcmF0aW9uTmFtZX0gLSAke2l0ZW1UaXRsZX1gLFxuICAgICAgSW50ZXJhY3Rpb25EYXRhOiBgJHtcbiAgICAgICAgQXBvbGxvc0NvbmZpZy5BUFAuREVFUF9MSU5LX0hPU1RcbiAgICAgIH06Ly9JbnRlcmFjdGlvbnMvQ29udGVudFNpbmdsZT9pdGVtSWQ9JHtpdGVtSWR9YCxcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzLmdldChgL0ludGVyYWN0aW9ucy8ke2ludGVyYWN0aW9uSWR9YCk7XG4gIH1cbn1cbiJdfQ==
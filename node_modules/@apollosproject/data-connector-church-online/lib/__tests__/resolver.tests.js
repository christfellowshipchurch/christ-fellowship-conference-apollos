"use strict";

var _apolloServerEnv = require("apollo-server-env");

var _graphql = require("graphql");

var _testUtils = require("@apollosproject/server-core/lib/testUtils");

var LiveStream = _interopRequireWildcard(require("../index"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

// we import the root-level schema and resolver so we test the entire integration:
const {
  getSchema,
  getContext
} = (0, _testUtils.createTestHelpers)({
  LiveStream
});
describe('LiveStream', () => {
  let schema;
  let context;
  beforeEach(() => {
    schema = getSchema();
    context = getContext();

    _apolloServerEnv.fetch.resetMocks();

    _apolloServerEnv.fetch.mockLiveDataSourceApis();
  });
  it('returns', async () => {
    const query = `
      query {
        liveStream {
          isLive
          eventStartTime
        }
      }
    `;
    const rootValue = {};
    const result = await (0, _graphql.graphql)(schema, query, rootValue, context);
    expect(result).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fX3Rlc3RzX18vcmVzb2x2ZXIudGVzdHMuanMiXSwibmFtZXMiOlsiZ2V0U2NoZW1hIiwiZ2V0Q29udGV4dCIsIkxpdmVTdHJlYW0iLCJkZXNjcmliZSIsInNjaGVtYSIsImNvbnRleHQiLCJiZWZvcmVFYWNoIiwiZmV0Y2giLCJyZXNldE1vY2tzIiwibW9ja0xpdmVEYXRhU291cmNlQXBpcyIsIml0IiwicXVlcnkiLCJyb290VmFsdWUiLCJyZXN1bHQiLCJleHBlY3QiLCJ0b01hdGNoU25hcHNob3QiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTtBQUVBLE1BQU07QUFBRUEsRUFBQUEsU0FBRjtBQUFhQyxFQUFBQTtBQUFiLElBQTRCLGtDQUFrQjtBQUFFQyxFQUFBQTtBQUFGLENBQWxCLENBQWxDO0FBQ0FDLFFBQVEsQ0FBQyxZQUFELEVBQWUsTUFBTTtBQUMzQixNQUFJQyxNQUFKO0FBQ0EsTUFBSUMsT0FBSjtBQUNBQyxFQUFBQSxVQUFVLENBQUMsTUFBTTtBQUNmRixJQUFBQSxNQUFNLEdBQUdKLFNBQVMsRUFBbEI7QUFDQUssSUFBQUEsT0FBTyxHQUFHSixVQUFVLEVBQXBCOztBQUVBTSwyQkFBTUMsVUFBTjs7QUFDQUQsMkJBQU1FLHNCQUFOO0FBQ0QsR0FOUyxDQUFWO0FBUUFDLEVBQUFBLEVBQUUsQ0FBQyxTQUFELEVBQVksWUFBWTtBQUN4QixVQUFNQyxLQUFLLEdBQUk7Ozs7Ozs7S0FBZjtBQVFBLFVBQU1DLFNBQVMsR0FBRyxFQUFsQjtBQUVBLFVBQU1DLE1BQU0sR0FBRyxNQUFNLHNCQUFRVCxNQUFSLEVBQWdCTyxLQUFoQixFQUF1QkMsU0FBdkIsRUFBa0NQLE9BQWxDLENBQXJCO0FBQ0FTLElBQUFBLE1BQU0sQ0FBQ0QsTUFBRCxDQUFOLENBQWVFLGVBQWY7QUFDRCxHQWJDLENBQUY7QUFjRCxDQXpCTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZmV0Y2ggfSBmcm9tICdhcG9sbG8tc2VydmVyLWVudic7XG5cbmltcG9ydCB7IGdyYXBocWwgfSBmcm9tICdncmFwaHFsJztcbmltcG9ydCB7IGNyZWF0ZVRlc3RIZWxwZXJzIH0gZnJvbSAnQGFwb2xsb3Nwcm9qZWN0L3NlcnZlci1jb3JlL2xpYi90ZXN0VXRpbHMnO1xuaW1wb3J0ICogYXMgTGl2ZVN0cmVhbSBmcm9tICcuLi9pbmRleCc7XG4vLyB3ZSBpbXBvcnQgdGhlIHJvb3QtbGV2ZWwgc2NoZW1hIGFuZCByZXNvbHZlciBzbyB3ZSB0ZXN0IHRoZSBlbnRpcmUgaW50ZWdyYXRpb246XG5cbmNvbnN0IHsgZ2V0U2NoZW1hLCBnZXRDb250ZXh0IH0gPSBjcmVhdGVUZXN0SGVscGVycyh7IExpdmVTdHJlYW0gfSk7XG5kZXNjcmliZSgnTGl2ZVN0cmVhbScsICgpID0+IHtcbiAgbGV0IHNjaGVtYTtcbiAgbGV0IGNvbnRleHQ7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHNjaGVtYSA9IGdldFNjaGVtYSgpO1xuICAgIGNvbnRleHQgPSBnZXRDb250ZXh0KCk7XG5cbiAgICBmZXRjaC5yZXNldE1vY2tzKCk7XG4gICAgZmV0Y2gubW9ja0xpdmVEYXRhU291cmNlQXBpcygpO1xuICB9KTtcblxuICBpdCgncmV0dXJucycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBxdWVyeSA9IGBcbiAgICAgIHF1ZXJ5IHtcbiAgICAgICAgbGl2ZVN0cmVhbSB7XG4gICAgICAgICAgaXNMaXZlXG4gICAgICAgICAgZXZlbnRTdGFydFRpbWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGA7XG4gICAgY29uc3Qgcm9vdFZhbHVlID0ge307XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBncmFwaHFsKHNjaGVtYSwgcXVlcnksIHJvb3RWYWx1ZSwgY29udGV4dCk7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9NYXRjaFNuYXBzaG90KCk7XG4gIH0pO1xufSk7XG4iXX0=
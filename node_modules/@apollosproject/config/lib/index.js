"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _attachEnvVariables = _interopRequireDefault(require("./attach-env-variables"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Config {
  constructor() {
    _defineProperty(this, "config", {
      ANALYTICS: {},
      CLOUDINARY: {},
      ROCK: {},
      ROCK_CONSTANTS: {},
      ROCK_MAPPINGS: {},
      BIBLE_API: {}
    });

    this.attachConfigToClass(this.config);
  }

  loadYaml({
    configPath
  }) {
    if (!configPath) {
      throw new Error('Config must be specifed in ApollosConfig');
    }

    let file;

    try {
      file = _fs.default.readFileSync(configPath, 'utf8');
    } catch (e) {
      throw new Error(`${configPath} does not exist`);
    }

    this._yml = _jsYaml.default.safeLoad(file);
    this.config = Object.assign(this.config, (0, _attachEnvVariables.default)(this._yml));
    this.attachConfigToClass(this.config);
    return this;
  }

  loadJs(data = {}) {
    Object.keys(data).forEach(key => {
      if (this.config[key]) {
        // Deep merge defaults if they exist.
        this.config[key] = Object.assign(this.config[key], data[key]);
      } else {
        // Otherwise attach results to config.
        this.config[key] = data[key];
      }
    });
    this.attachConfigToClass(this.config);
  } // Allows you to do Config.PROPERTY


  attachConfigToClass(config) {
    Object.keys(config).forEach(key => {
      Object.defineProperty(this, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: config[key]
      });
    });
  }

}

const config = new Config();
var _default = config;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJDb25maWciLCJjb25zdHJ1Y3RvciIsIkFOQUxZVElDUyIsIkNMT1VESU5BUlkiLCJST0NLIiwiUk9DS19DT05TVEFOVFMiLCJST0NLX01BUFBJTkdTIiwiQklCTEVfQVBJIiwiYXR0YWNoQ29uZmlnVG9DbGFzcyIsImNvbmZpZyIsImxvYWRZYW1sIiwiY29uZmlnUGF0aCIsIkVycm9yIiwiZmlsZSIsImZzIiwicmVhZEZpbGVTeW5jIiwiZSIsIl95bWwiLCJ5YW1sIiwic2FmZUxvYWQiLCJPYmplY3QiLCJhc3NpZ24iLCJsb2FkSnMiLCJkYXRhIiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBLE1BQU1BLE1BQU4sQ0FBYTtBQVVYQyxFQUFBQSxXQUFXLEdBQUc7QUFBQSxvQ0FUTDtBQUNQQyxNQUFBQSxTQUFTLEVBQUUsRUFESjtBQUVQQyxNQUFBQSxVQUFVLEVBQUUsRUFGTDtBQUdQQyxNQUFBQSxJQUFJLEVBQUUsRUFIQztBQUlQQyxNQUFBQSxjQUFjLEVBQUUsRUFKVDtBQUtQQyxNQUFBQSxhQUFhLEVBQUUsRUFMUjtBQU1QQyxNQUFBQSxTQUFTLEVBQUU7QUFOSixLQVNLOztBQUNaLFNBQUtDLG1CQUFMLENBQXlCLEtBQUtDLE1BQTlCO0FBQ0Q7O0FBRURDLEVBQUFBLFFBQVEsQ0FBQztBQUFFQyxJQUFBQTtBQUFGLEdBQUQsRUFBaUI7QUFDdkIsUUFBSSxDQUFDQSxVQUFMLEVBQWlCO0FBQ2YsWUFBTSxJQUFJQyxLQUFKLENBQVUsMENBQVYsQ0FBTjtBQUNEOztBQUNELFFBQUlDLElBQUo7O0FBQ0EsUUFBSTtBQUNGQSxNQUFBQSxJQUFJLEdBQUdDLFlBQUdDLFlBQUgsQ0FBZ0JKLFVBQWhCLEVBQTRCLE1BQTVCLENBQVA7QUFDRCxLQUZELENBRUUsT0FBT0ssQ0FBUCxFQUFVO0FBQ1YsWUFBTSxJQUFJSixLQUFKLENBQVcsR0FBRUQsVUFBVyxpQkFBeEIsQ0FBTjtBQUNEOztBQUNELFNBQUtNLElBQUwsR0FBWUMsZ0JBQUtDLFFBQUwsQ0FBY04sSUFBZCxDQUFaO0FBQ0EsU0FBS0osTUFBTCxHQUFjVyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxLQUFLWixNQUFuQixFQUEyQixpQ0FBbUIsS0FBS1EsSUFBeEIsQ0FBM0IsQ0FBZDtBQUNBLFNBQUtULG1CQUFMLENBQXlCLEtBQUtDLE1BQTlCO0FBQ0EsV0FBTyxJQUFQO0FBQ0Q7O0FBRURhLEVBQUFBLE1BQU0sQ0FBQ0MsSUFBSSxHQUFHLEVBQVIsRUFBWTtBQUNoQkgsSUFBQUEsTUFBTSxDQUFDSSxJQUFQLENBQVlELElBQVosRUFBa0JFLE9BQWxCLENBQTJCQyxHQUFELElBQVM7QUFDakMsVUFBSSxLQUFLakIsTUFBTCxDQUFZaUIsR0FBWixDQUFKLEVBQXNCO0FBQ3BCO0FBQ0EsYUFBS2pCLE1BQUwsQ0FBWWlCLEdBQVosSUFBbUJOLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEtBQUtaLE1BQUwsQ0FBWWlCLEdBQVosQ0FBZCxFQUFnQ0gsSUFBSSxDQUFDRyxHQUFELENBQXBDLENBQW5CO0FBQ0QsT0FIRCxNQUdPO0FBQ0w7QUFDQSxhQUFLakIsTUFBTCxDQUFZaUIsR0FBWixJQUFtQkgsSUFBSSxDQUFDRyxHQUFELENBQXZCO0FBQ0Q7QUFDRixLQVJEO0FBU0EsU0FBS2xCLG1CQUFMLENBQXlCLEtBQUtDLE1BQTlCO0FBQ0QsR0F6Q1UsQ0EyQ1g7OztBQUNBRCxFQUFBQSxtQkFBbUIsQ0FBQ0MsTUFBRCxFQUFTO0FBQzFCVyxJQUFBQSxNQUFNLENBQUNJLElBQVAsQ0FBWWYsTUFBWixFQUFvQmdCLE9BQXBCLENBQTZCQyxHQUFELElBQVM7QUFDbkNOLE1BQUFBLE1BQU0sQ0FBQ08sY0FBUCxDQUFzQixJQUF0QixFQUE0QkQsR0FBNUIsRUFBaUM7QUFDL0JFLFFBQUFBLFVBQVUsRUFBRSxJQURtQjtBQUUvQkMsUUFBQUEsWUFBWSxFQUFFLElBRmlCO0FBRy9CQyxRQUFBQSxRQUFRLEVBQUUsSUFIcUI7QUFJL0JDLFFBQUFBLEtBQUssRUFBRXRCLE1BQU0sQ0FBQ2lCLEdBQUQ7QUFKa0IsT0FBakM7QUFNRCxLQVBEO0FBUUQ7O0FBckRVOztBQXdEYixNQUFNakIsTUFBTSxHQUFHLElBQUlULE1BQUosRUFBZjtlQUVlUyxNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCB5YW1sIGZyb20gJ2pzLXlhbWwnO1xuaW1wb3J0IGF0dGFjaEVudlZhcmlhYmxlcyBmcm9tICcuL2F0dGFjaC1lbnYtdmFyaWFibGVzJztcblxuY2xhc3MgQ29uZmlnIHtcbiAgY29uZmlnID0ge1xuICAgIEFOQUxZVElDUzoge30sXG4gICAgQ0xPVURJTkFSWToge30sXG4gICAgUk9DSzoge30sXG4gICAgUk9DS19DT05TVEFOVFM6IHt9LFxuICAgIFJPQ0tfTUFQUElOR1M6IHt9LFxuICAgIEJJQkxFX0FQSToge30sXG4gIH07XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5hdHRhY2hDb25maWdUb0NsYXNzKHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGxvYWRZYW1sKHsgY29uZmlnUGF0aCB9KSB7XG4gICAgaWYgKCFjb25maWdQYXRoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbmZpZyBtdXN0IGJlIHNwZWNpZmVkIGluIEFwb2xsb3NDb25maWcnKTtcbiAgICB9XG4gICAgbGV0IGZpbGU7XG4gICAgdHJ5IHtcbiAgICAgIGZpbGUgPSBmcy5yZWFkRmlsZVN5bmMoY29uZmlnUGF0aCwgJ3V0ZjgnKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7Y29uZmlnUGF0aH0gZG9lcyBub3QgZXhpc3RgKTtcbiAgICB9XG4gICAgdGhpcy5feW1sID0geWFtbC5zYWZlTG9hZChmaWxlKTtcbiAgICB0aGlzLmNvbmZpZyA9IE9iamVjdC5hc3NpZ24odGhpcy5jb25maWcsIGF0dGFjaEVudlZhcmlhYmxlcyh0aGlzLl95bWwpKTtcbiAgICB0aGlzLmF0dGFjaENvbmZpZ1RvQ2xhc3ModGhpcy5jb25maWcpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbG9hZEpzKGRhdGEgPSB7fSkge1xuICAgIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKHRoaXMuY29uZmlnW2tleV0pIHtcbiAgICAgICAgLy8gRGVlcCBtZXJnZSBkZWZhdWx0cyBpZiB0aGV5IGV4aXN0LlxuICAgICAgICB0aGlzLmNvbmZpZ1trZXldID0gT2JqZWN0LmFzc2lnbih0aGlzLmNvbmZpZ1trZXldLCBkYXRhW2tleV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlIGF0dGFjaCByZXN1bHRzIHRvIGNvbmZpZy5cbiAgICAgICAgdGhpcy5jb25maWdba2V5XSA9IGRhdGFba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmF0dGFjaENvbmZpZ1RvQ2xhc3ModGhpcy5jb25maWcpO1xuICB9XG5cbiAgLy8gQWxsb3dzIHlvdSB0byBkbyBDb25maWcuUFJPUEVSVFlcbiAgYXR0YWNoQ29uZmlnVG9DbGFzcyhjb25maWcpIHtcbiAgICBPYmplY3Qua2V5cyhjb25maWcpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGtleSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogY29uZmlnW2tleV0sXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG5jb25zdCBjb25maWcgPSBuZXcgQ29uZmlnKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbmZpZztcbiJdfQ==
"use strict";

var _graphql = require("graphql");

var _apolloServerEnv = require("apollo-server-env");

var _config = _interopRequireDefault(require("@apollosproject/config"));

var _serverCore = require("@apollosproject/server-core");

var _testUtils = require("@apollosproject/server-core/lib/testUtils");

var _dataConnectorRockAuth = require("@apollosproject/data-connector-rock-auth");

var _dataSchema = require("@apollosproject/data-schema");

var Person = _interopRequireWildcard(require("../index"));

var _authMock = _interopRequireDefault(require("../../authMock"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// we import the root-level schema and resolver so we test the entire integration:
const Auth = {
  schema: _dataSchema.authSchema,
  dataSource: _authMock.default
};
const {
  getContext,
  getSchema
} = (0, _testUtils.createTestHelpers)({
  Person,
  Auth
});

_config.default.loadJs({
  ROCK: {
    API_URL: 'https://apollosrock.newspring.cc/api',
    API_TOKEN: 'some-rock-token',
    IMAGE_URL: 'https://apollosrock.newspring.cc/GetImage.ashx'
  }
});

describe('Person', () => {
  let schema;
  let context;
  beforeEach(() => {
    _apolloServerEnv.fetch.resetMocks();

    _apolloServerEnv.fetch.mockRockDataSourceAPI();

    schema = getSchema([_dataSchema.peopleSchema, _dataSchema.mediaSchema]);
    context = getContext();
  });
  it("updates a user's attributes, if there is a current user", async () => {
    const query = `
      mutation {
        updateProfileField(input: { field: FirstName, value: "Richard" }) {
          firstName
          id
        }
      }
    `;
    const {
      userToken,
      rockCookie
    } = (0, _dataConnectorRockAuth.registerToken)((0, _dataConnectorRockAuth.generateToken)({
      cookie: 'some-cookie'
    }));
    context.userToken = userToken;
    context.rockCookie = rockCookie;
    const rootValue = {};
    const result = await (0, _graphql.graphql)(schema, query, rootValue, context);
    expect(result).toMatchSnapshot();
  });
  it('updates multiple fields', async () => {
    const query = `
      mutation {
        updateProfileFields(input: [
          { field: FirstName, value: "Richard" },
          { field: LastName, value: "Walkerton" }
        ]) {
          firstName
          lastName
          id
        }
      }
    `;
    const {
      userToken,
      rockCookie
    } = (0, _dataConnectorRockAuth.registerToken)((0, _dataConnectorRockAuth.generateToken)({
      cookie: 'some-cookie'
    }));
    context.userToken = userToken;
    context.rockCookie = rockCookie;
    const rootValue = {};
    const result = await (0, _graphql.graphql)(schema, query, rootValue, context);
    expect(result).toMatchSnapshot();
  });
  it("fails to update a user's attributes, without a current user", async () => {
    const query = `
      mutation {
        updateProfileField(input: { field: FirstName, value: "Richard" }) {
          firstName
          id
        }
      }
    `;
    const rootValue = {};
    const result = await (0, _graphql.graphql)(schema, query, rootValue, context);
    expect(result).toMatchSnapshot();
  });
  it('gets people by an email', async () => {
    const query = `
      query {
        people(email: "isaac.hardy@newspring.cc") {
          id
          firstName
          lastName
          nickName
          email
          photo {
            uri
          }
        }
      }
    `;
    const rootValue = {};
    const result = await (0, _graphql.graphql)(schema, query, rootValue, context);
    expect(result).toMatchSnapshot();
  });
  it('gets a single person when querying by root node', async () => {
    const query = `
      query {
        node(
          id: "${(0, _serverCore.createGlobalId)(51, 'Person')}"
        ) {
          ... on Person {
            id
            firstName
            lastName
            nickName
            email
            photo {
              uri
            }
          }
        }
      }
    `;
    const rootValue = {};
    const result = await (0, _graphql.graphql)(schema, query, rootValue, context);
    expect(result).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
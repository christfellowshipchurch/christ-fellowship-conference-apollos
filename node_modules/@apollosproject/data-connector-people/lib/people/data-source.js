"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _apolloServer = require("apollo-server");

var _formData = _interopRequireDefault(require("form-data"));

var _lodash = require("lodash");

var _rockApolloDataSource = _interopRequireDefault(require("@apollosproject/rock-apollo-data-source"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Person extends _rockApolloDataSource.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "resource", 'People');

    _defineProperty(this, "getFromId", id => this.request().find(id).get());

    _defineProperty(this, "getFromEmail", email => this.request().filter(`Email eq '${email}'`).get());

    _defineProperty(this, "updateProfile", async fields => {
      const currentPerson = await this.context.dataSources.Auth.getCurrentPerson();
      if (!currentPerson) throw new _apolloServer.AuthenticationError('Invalid Credentials');
      const fieldsAsObject = fields.reduce((accum, {
        field,
        value
      }) => ({ ...accum,
        [field]: value
      }), {});
      await this.patch(`/People/${currentPerson.id}`, fieldsAsObject);
      return { ...currentPerson,
        ...(0, _lodash.mapKeys)(fieldsAsObject, (_, key) => (0, _lodash.camelCase)(key))
      };
    });

    _defineProperty(this, "uploadProfileImage", async (file, length) => {
      const {
        stream,
        filename
      } = await file;
      const data = new _formData.default();
      data.append('file', stream, {
        filename,
        knownLength: length
      });
      const response = await this.nodeFetch(`${this.baseURL}/BinaryFiles/Upload?binaryFileTypeId=5`, {
        method: 'POST',
        body: data,
        headers: {
          'Authorization-Token': this.rockToken,
          ...data.getHeaders()
        }
      });
      const photoId = await response.text();
      return this.updateProfile([{
        field: 'PhotoId',
        value: photoId
      }]);
    });
  }

}

exports.default = Person;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wZW9wbGUvZGF0YS1zb3VyY2UuanMiXSwibmFtZXMiOlsiUGVyc29uIiwiUm9ja0Fwb2xsb0RhdGFTb3VyY2UiLCJpZCIsInJlcXVlc3QiLCJmaW5kIiwiZ2V0IiwiZW1haWwiLCJmaWx0ZXIiLCJmaWVsZHMiLCJjdXJyZW50UGVyc29uIiwiY29udGV4dCIsImRhdGFTb3VyY2VzIiwiQXV0aCIsImdldEN1cnJlbnRQZXJzb24iLCJBdXRoZW50aWNhdGlvbkVycm9yIiwiZmllbGRzQXNPYmplY3QiLCJyZWR1Y2UiLCJhY2N1bSIsImZpZWxkIiwidmFsdWUiLCJwYXRjaCIsIl8iLCJrZXkiLCJmaWxlIiwibGVuZ3RoIiwic3RyZWFtIiwiZmlsZW5hbWUiLCJkYXRhIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJrbm93bkxlbmd0aCIsInJlc3BvbnNlIiwibm9kZUZldGNoIiwiYmFzZVVSTCIsIm1ldGhvZCIsImJvZHkiLCJoZWFkZXJzIiwicm9ja1Rva2VuIiwiZ2V0SGVhZGVycyIsInBob3RvSWQiLCJ0ZXh0IiwidXBkYXRlUHJvZmlsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7QUFFZSxNQUFNQSxNQUFOLFNBQXFCQyw2QkFBckIsQ0FBMEM7QUFBQTtBQUFBOztBQUFBLHNDQUM1QyxRQUQ0Qzs7QUFBQSx1Q0FHMUNDLEVBQUQsSUFDVixLQUFLQyxPQUFMLEdBQ0dDLElBREgsQ0FDUUYsRUFEUixFQUVHRyxHQUZILEVBSnFEOztBQUFBLDBDQVF2Q0MsS0FBRCxJQUNiLEtBQUtILE9BQUwsR0FDR0ksTUFESCxDQUNXLGFBQVlELEtBQU0sR0FEN0IsRUFFR0QsR0FGSCxFQVRxRDs7QUFBQSwyQ0FldkMsTUFBT0csTUFBUCxJQUFrQjtBQUNoQyxZQUFNQyxhQUFhLEdBQUcsTUFBTSxLQUFLQyxPQUFMLENBQWFDLFdBQWIsQ0FBeUJDLElBQXpCLENBQThCQyxnQkFBOUIsRUFBNUI7QUFFQSxVQUFJLENBQUNKLGFBQUwsRUFBb0IsTUFBTSxJQUFJSyxpQ0FBSixDQUF3QixxQkFBeEIsQ0FBTjtBQUVwQixZQUFNQyxjQUFjLEdBQUdQLE1BQU0sQ0FBQ1EsTUFBUCxDQUNyQixDQUFDQyxLQUFELEVBQVE7QUFBRUMsUUFBQUEsS0FBRjtBQUFTQyxRQUFBQTtBQUFULE9BQVIsTUFBOEIsRUFDNUIsR0FBR0YsS0FEeUI7QUFFNUIsU0FBQ0MsS0FBRCxHQUFTQztBQUZtQixPQUE5QixDQURxQixFQUtyQixFQUxxQixDQUF2QjtBQVFBLFlBQU0sS0FBS0MsS0FBTCxDQUFZLFdBQVVYLGFBQWEsQ0FBQ1AsRUFBRyxFQUF2QyxFQUEwQ2EsY0FBMUMsQ0FBTjtBQUVBLGFBQU8sRUFDTCxHQUFHTixhQURFO0FBRUwsV0FBRyxxQkFBUU0sY0FBUixFQUF3QixDQUFDTSxDQUFELEVBQUlDLEdBQUosS0FBWSx1QkFBVUEsR0FBVixDQUFwQztBQUZFLE9BQVA7QUFJRCxLQWxDc0Q7O0FBQUEsZ0RBb0NsQyxPQUFPQyxJQUFQLEVBQWFDLE1BQWIsS0FBd0I7QUFDM0MsWUFBTTtBQUFFQyxRQUFBQSxNQUFGO0FBQVVDLFFBQUFBO0FBQVYsVUFBdUIsTUFBTUgsSUFBbkM7QUFDQSxZQUFNSSxJQUFJLEdBQUcsSUFBSUMsaUJBQUosRUFBYjtBQUNBRCxNQUFBQSxJQUFJLENBQUNFLE1BQUwsQ0FBWSxNQUFaLEVBQW9CSixNQUFwQixFQUE0QjtBQUMxQkMsUUFBQUEsUUFEMEI7QUFFMUJJLFFBQUFBLFdBQVcsRUFBRU47QUFGYSxPQUE1QjtBQUlBLFlBQU1PLFFBQVEsR0FBRyxNQUFNLEtBQUtDLFNBQUwsQ0FDcEIsR0FBRSxLQUFLQyxPQUFRLHdDQURLLEVBRXJCO0FBQ0VDLFFBQUFBLE1BQU0sRUFBRSxNQURWO0FBRUVDLFFBQUFBLElBQUksRUFBRVIsSUFGUjtBQUdFUyxRQUFBQSxPQUFPLEVBQUU7QUFDUCxpQ0FBdUIsS0FBS0MsU0FEckI7QUFFUCxhQUFHVixJQUFJLENBQUNXLFVBQUw7QUFGSTtBQUhYLE9BRnFCLENBQXZCO0FBV0EsWUFBTUMsT0FBTyxHQUFHLE1BQU1SLFFBQVEsQ0FBQ1MsSUFBVCxFQUF0QjtBQUNBLGFBQU8sS0FBS0MsYUFBTCxDQUFtQixDQUFDO0FBQUV2QixRQUFBQSxLQUFLLEVBQUUsU0FBVDtBQUFvQkMsUUFBQUEsS0FBSyxFQUFFb0I7QUFBM0IsT0FBRCxDQUFuQixDQUFQO0FBQ0QsS0F4RHNEO0FBQUE7O0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBdXRoZW50aWNhdGlvbkVycm9yIH0gZnJvbSAnYXBvbGxvLXNlcnZlcic7XG5pbXBvcnQgRm9ybURhdGEgZnJvbSAnZm9ybS1kYXRhJztcbmltcG9ydCB7IGNhbWVsQ2FzZSwgbWFwS2V5cyB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgUm9ja0Fwb2xsb0RhdGFTb3VyY2UgZnJvbSAnQGFwb2xsb3Nwcm9qZWN0L3JvY2stYXBvbGxvLWRhdGEtc291cmNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGVyc29uIGV4dGVuZHMgUm9ja0Fwb2xsb0RhdGFTb3VyY2Uge1xuICByZXNvdXJjZSA9ICdQZW9wbGUnO1xuXG4gIGdldEZyb21JZCA9IChpZCkgPT5cbiAgICB0aGlzLnJlcXVlc3QoKVxuICAgICAgLmZpbmQoaWQpXG4gICAgICAuZ2V0KCk7XG5cbiAgZ2V0RnJvbUVtYWlsID0gKGVtYWlsKSA9PlxuICAgIHRoaXMucmVxdWVzdCgpXG4gICAgICAuZmlsdGVyKGBFbWFpbCBlcSAnJHtlbWFpbH0nYClcbiAgICAgIC5nZXQoKTtcblxuICAvLyBmaWVsZHMgaXMgYW4gYXJyYXkgb2Ygb2JqZWN0cyBtYXRjaGluZyB0aGUgcGF0dGVyblxuICAvLyBbeyBmaWVsZDogU3RyaW5nLCB2YWx1ZTogU3RyaW5nIH1dXG4gIHVwZGF0ZVByb2ZpbGUgPSBhc3luYyAoZmllbGRzKSA9PiB7XG4gICAgY29uc3QgY3VycmVudFBlcnNvbiA9IGF3YWl0IHRoaXMuY29udGV4dC5kYXRhU291cmNlcy5BdXRoLmdldEN1cnJlbnRQZXJzb24oKTtcblxuICAgIGlmICghY3VycmVudFBlcnNvbikgdGhyb3cgbmV3IEF1dGhlbnRpY2F0aW9uRXJyb3IoJ0ludmFsaWQgQ3JlZGVudGlhbHMnKTtcblxuICAgIGNvbnN0IGZpZWxkc0FzT2JqZWN0ID0gZmllbGRzLnJlZHVjZShcbiAgICAgIChhY2N1bSwgeyBmaWVsZCwgdmFsdWUgfSkgPT4gKHtcbiAgICAgICAgLi4uYWNjdW0sXG4gICAgICAgIFtmaWVsZF06IHZhbHVlLFxuICAgICAgfSksXG4gICAgICB7fVxuICAgICk7XG5cbiAgICBhd2FpdCB0aGlzLnBhdGNoKGAvUGVvcGxlLyR7Y3VycmVudFBlcnNvbi5pZH1gLCBmaWVsZHNBc09iamVjdCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4uY3VycmVudFBlcnNvbixcbiAgICAgIC4uLm1hcEtleXMoZmllbGRzQXNPYmplY3QsIChfLCBrZXkpID0+IGNhbWVsQ2FzZShrZXkpKSxcbiAgICB9O1xuICB9O1xuXG4gIHVwbG9hZFByb2ZpbGVJbWFnZSA9IGFzeW5jIChmaWxlLCBsZW5ndGgpID0+IHtcbiAgICBjb25zdCB7IHN0cmVhbSwgZmlsZW5hbWUgfSA9IGF3YWl0IGZpbGU7XG4gICAgY29uc3QgZGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGRhdGEuYXBwZW5kKCdmaWxlJywgc3RyZWFtLCB7XG4gICAgICBmaWxlbmFtZSxcbiAgICAgIGtub3duTGVuZ3RoOiBsZW5ndGgsXG4gICAgfSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLm5vZGVGZXRjaChcbiAgICAgIGAke3RoaXMuYmFzZVVSTH0vQmluYXJ5RmlsZXMvVXBsb2FkP2JpbmFyeUZpbGVUeXBlSWQ9NWAsXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiBkYXRhLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0F1dGhvcml6YXRpb24tVG9rZW4nOiB0aGlzLnJvY2tUb2tlbixcbiAgICAgICAgICAuLi5kYXRhLmdldEhlYWRlcnMoKSxcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICApO1xuICAgIGNvbnN0IHBob3RvSWQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlUHJvZmlsZShbeyBmaWVsZDogJ1Bob3RvSWQnLCB2YWx1ZTogcGhvdG9JZCB9XSk7XG4gIH07XG59XG4iXX0=
"use strict";

var _config = _interopRequireDefault(require("@apollosproject/config"));

var _dataSource = _interopRequireDefault(require("../data-source"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const buildGetMock = (response, dataSource) => {
  const get = jest.fn();

  if (Array.isArray(response) && Array.isArray(response[0])) {
    response.forEach(responseVal => {
      get.mockReturnValueOnce(new Promise(resolve => resolve(dataSource.normalize(responseVal))));
    });
  }

  get.mockReturnValue(new Promise(resolve => resolve(dataSource.normalize(response))));
  return get;
};

_config.default.loadJs({
  ROCK: {
    API_URL: 'https://apollosrock.newspring.cc/api',
    API_TOKEN: 'some-rock-token',
    IMAGE_URL: 'https://apollosrock.newspring.cc/GetImage.ashx'
  }
});

describe('Family Data Source', () => {
  it('must fetch a users location w/ family location', async () => {
    const dataSource = new _dataSource.default();
    dataSource.get = buildGetMock([{
      GroupLocations: [{
        Location: {
          City: 'Chicago',
          State: 'IL'
        }
      }],
      Campus: {
        Name: 'Main Campus'
      }
    }], dataSource);
    const location = await dataSource.getFamilyLocation({
      userId: 'something'
    });
    expect(location).toEqual('Chicago, IL');
  });
  it('must fetch a users location w/ campus', async () => {
    const dataSource = new _dataSource.default();
    dataSource.get = buildGetMock([{
      GroupLocations: [],
      Campus: {
        Name: 'Main Campus'
      }
    }], dataSource);
    const location = await dataSource.getFamilyLocation({
      userId: 'something'
    });
    expect(location).toEqual('Main Campus');
  });
  it('must return null without data', async () => {
    const dataSource = new _dataSource.default();
    dataSource.get = buildGetMock([{
      GroupLocations: []
    }], dataSource);
    const location = await dataSource.getFamilyLocation({
      userId: 'something'
    });
    expect(location).toEqual(null);
  });
  it('raise an error without a userId', async () => {
    const dataSource = new _dataSource.default();
    await expect(dataSource.getFamilyLocation({
      userId: null
    })).rejects.toThrow();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9mYW1pbHkvX190ZXN0c19fL2RhdGEtc291cmNlLnRlc3RzLmpzIl0sIm5hbWVzIjpbImJ1aWxkR2V0TW9jayIsInJlc3BvbnNlIiwiZGF0YVNvdXJjZSIsImdldCIsImplc3QiLCJmbiIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJyZXNwb25zZVZhbCIsIm1vY2tSZXR1cm5WYWx1ZU9uY2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm5vcm1hbGl6ZSIsIm1vY2tSZXR1cm5WYWx1ZSIsIkFwb2xsb3NDb25maWciLCJsb2FkSnMiLCJST0NLIiwiQVBJX1VSTCIsIkFQSV9UT0tFTiIsIklNQUdFX1VSTCIsImRlc2NyaWJlIiwiaXQiLCJEYXRhU291cmNlIiwiR3JvdXBMb2NhdGlvbnMiLCJMb2NhdGlvbiIsIkNpdHkiLCJTdGF0ZSIsIkNhbXB1cyIsIk5hbWUiLCJsb2NhdGlvbiIsImdldEZhbWlseUxvY2F0aW9uIiwidXNlcklkIiwiZXhwZWN0IiwidG9FcXVhbCIsInJlamVjdHMiLCJ0b1Rocm93Il0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOzs7O0FBRUEsTUFBTUEsWUFBWSxHQUFHLENBQUNDLFFBQUQsRUFBV0MsVUFBWCxLQUEwQjtBQUM3QyxRQUFNQyxHQUFHLEdBQUdDLElBQUksQ0FBQ0MsRUFBTCxFQUFaOztBQUNBLE1BQUlDLEtBQUssQ0FBQ0MsT0FBTixDQUFjTixRQUFkLEtBQTJCSyxLQUFLLENBQUNDLE9BQU4sQ0FBY04sUUFBUSxDQUFDLENBQUQsQ0FBdEIsQ0FBL0IsRUFBMkQ7QUFDekRBLElBQUFBLFFBQVEsQ0FBQ08sT0FBVCxDQUFrQkMsV0FBRCxJQUFpQjtBQUNoQ04sTUFBQUEsR0FBRyxDQUFDTyxtQkFBSixDQUNFLElBQUlDLE9BQUosQ0FBYUMsT0FBRCxJQUFhQSxPQUFPLENBQUNWLFVBQVUsQ0FBQ1csU0FBWCxDQUFxQkosV0FBckIsQ0FBRCxDQUFoQyxDQURGO0FBR0QsS0FKRDtBQUtEOztBQUNE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QUtELEdBUEMsQ0FBRjtBQVFELENBcERPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXBvbGxvc0NvbmZpZyBmcm9tICdAYXBvbGxvc3Byb2plY3QvY29uZmlnJztcbmltcG9ydCBEYXRhU291cmNlIGZyb20gJy4uL2RhdGEtc291cmNlJztcblxuY29uc3QgYnVpbGRHZXRNb2NrID0gKHJlc3BvbnNlLCBkYXRhU291cmNlKSA9PiB7XG4gIGNvbnN0IGdldCA9IGplc3QuZm4oKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocmVzcG9uc2UpICYmIEFycmF5LmlzQXJyYXkocmVzcG9uc2VbMF0pKSB7XG4gICAgcmVzcG9uc2UuZm9yRWFjaCgocmVzcG9uc2VWYWwpID0+IHtcbiAgICAgIGdldC5tb2NrUmV0dXJuVmFsdWVPbmNlKFxuICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gcmVzb2x2ZShkYXRhU291cmNlLm5vcm1hbGl6ZShyZXNwb25zZVZhbCkpKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuICBnZXQubW9ja1JldHVyblZhbHVlKFxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiByZXNvbHZlKGRhdGFTb3VyY2Uubm9ybWFsaXplKHJlc3BvbnNlKSkpXG4gICk7XG4gIHJldHVybiBnZXQ7XG59O1xuXG5BcG9sbG9zQ29uZmlnLmxvYWRKcyh7XG4gIFJPQ0s6IHtcbiAgICBBUElfVVJMOiAnaHR0cHM6Ly9hcG9sbG9zcm9jay5uZXdzcHJpbmcuY2MvYXBpJyxcbiAgICBBUElfVE9LRU46ICdzb21lLXJvY2stdG9rZW4nLFxuICAgIElNQUdFX1VSTDogJ2h0dHBzOi8vYXBvbGxvc3JvY2submV3c3ByaW5nLmNjL0dldEltYWdlLmFzaHgnLFxuICB9LFxufSk7XG5cbmRlc2NyaWJlKCdGYW1pbHkgRGF0YSBTb3VyY2UnLCAoKSA9PiB7XG4gIGl0KCdtdXN0IGZldGNoIGEgdXNlcnMgbG9jYXRpb24gdy8gZmFtaWx5IGxvY2F0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGRhdGFTb3VyY2UgPSBuZXcgRGF0YVNvdXJjZSgpO1xuICAgIGRhdGFTb3VyY2UuZ2V0ID0gYnVpbGRHZXRNb2NrKFxuICAgICAgW1xuICAgICAgICB7XG4gICAgICAgICAgR3JvdXBMb2NhdGlvbnM6IFt7IExvY2F0aW9uOiB7IENpdHk6ICdDaGljYWdvJywgU3RhdGU6ICdJTCcgfSB9XSxcbiAgICAgICAgICBDYW1wdXM6IHsgTmFtZTogJ01haW4gQ2FtcHVzJyB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIGRhdGFTb3VyY2VcbiAgICApO1xuXG4gICAgY29uc3QgbG9jYXRpb24gPSBhd2FpdCBkYXRhU291cmNlLmdldEZhbWlseUxvY2F0aW9uKHtcbiAgICAgIHVzZXJJZDogJ3NvbWV0aGluZycsXG4gICAgfSk7XG4gICAgZXhwZWN0KGxvY2F0aW9uKS50b0VxdWFsKCdDaGljYWdvLCBJTCcpO1xuICB9KTtcbiAgaXQoJ211c3QgZmV0Y2ggYSB1c2VycyBsb2NhdGlvbiB3LyBjYW1wdXMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZGF0YVNvdXJjZSA9IG5ldyBEYXRhU291cmNlKCk7XG4gICAgZGF0YVNvdXJjZS5nZXQgPSBidWlsZEdldE1vY2soXG4gICAgICBbXG4gICAgICAgIHtcbiAgICAgICAgICBHcm91cExvY2F0aW9uczogW10sXG4gICAgICAgICAgQ2FtcHVzOiB7IE5hbWU6ICdNYWluIENhbXB1cycgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBkYXRhU291cmNlXG4gICAgKTtcblxuICAgIGNvbnN0IGxvY2F0aW9uID0gYXdhaXQgZGF0YVNvdXJjZS5nZXRGYW1pbHlMb2NhdGlvbih7XG4gICAgICB1c2VySWQ6ICdzb21ldGhpbmcnLFxuICAgIH0pO1xuICAgIGV4cGVjdChsb2NhdGlvbikudG9FcXVhbCgnTWFpbiBDYW1wdXMnKTtcbiAgfSk7XG4gIGl0KCdtdXN0IHJldHVybiBudWxsIHdpdGhvdXQgZGF0YScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBkYXRhU291cmNlID0gbmV3IERhdGFTb3VyY2UoKTtcbiAgICBkYXRhU291cmNlLmdldCA9IGJ1aWxkR2V0TW9jayhbeyBHcm91cExvY2F0aW9uczogW10gfV0sIGRhdGFTb3VyY2UpO1xuXG4gICAgY29uc3QgbG9jYXRpb24gPSBhd2FpdCBkYXRhU291cmNlLmdldEZhbWlseUxvY2F0aW9uKHtcbiAgICAgIHVzZXJJZDogJ3NvbWV0aGluZycsXG4gICAgfSk7XG4gICAgZXhwZWN0KGxvY2F0aW9uKS50b0VxdWFsKG51bGwpO1xuICB9KTtcbiAgaXQoJ3JhaXNlIGFuIGVycm9yIHdpdGhvdXQgYSB1c2VySWQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZGF0YVNvdXJjZSA9IG5ldyBEYXRhU291cmNlKCk7XG4gICAgYXdhaXQgZXhwZWN0KFxuICAgICAgZGF0YVNvdXJjZS5nZXRGYW1pbHlMb2NhdGlvbih7XG4gICAgICAgIHVzZXJJZDogbnVsbCxcbiAgICAgIH0pXG4gICAgKS5yZWplY3RzLnRvVGhyb3coKTtcbiAgfSk7XG59KTtcbiJdfQ==
"use strict";

var _graphql = require("graphql");

var _apolloServerEnv = require("apollo-server-env");

var _config = _interopRequireDefault(require("@apollosproject/config"));

var _dataConnectorRockAuth = require("@apollosproject/data-connector-rock-auth");

var _dataSchema = require("@apollosproject/data-schema");

var _testUtils = require("@apollosproject/server-core/lib/testUtils");

var _ = require("../..");

var _authMock = _interopRequireDefault(require("../../authMock"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// we import the root-level schema and resolver so we test the entire integration:
_config.default.loadJs({
  ROCK: {
    API_URL: 'https://apollosrock.newspring.cc/api',
    API_TOKEN: 'some-rock-token',
    IMAGE_URL: 'https://apollosrock.newspring.cc/GetImage.ashx'
  }
});

const Auth = {
  schema: _dataSchema.authSchema,
  dataSource: _authMock.default,
  resolver: {
    Query: {
      currentUser: () => ({
        profile: {
          id: 51
        }
      })
    }
  }
};
const {
  getContext,
  getSchema
} = (0, _testUtils.createTestHelpers)({
  Person: _.Person,
  Family: _.Family,
  Auth
});
describe('Family', () => {
  let schema;
  let context;
  beforeEach(() => {
    _apolloServerEnv.fetch.resetMocks();

    _apolloServerEnv.fetch.mockRockDataSourceAPI();

    schema = getSchema([_dataSchema.peopleSchema, _dataSchema.mediaSchema]);
    const token = (0, _dataConnectorRockAuth.generateToken)({
      cookie: 'some-cookie',
      sessionId: 'somessessionid'
    });
    context = getContext({
      req: {
        headers: {
          authorization: token
        }
      }
    });
  });
  it("returns a user's location", async () => {
    const query = `
      query {
        currentUser {
          profile {
            location
          }
        }
      }
    `;
    const rootValue = {};
    const result = await (0, _graphql.graphql)(schema, query, rootValue, context);
    expect(result).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9mYW1pbHkvX190ZXN0c19fL3NjaGVtYS50ZXN0cy5qcyJdLCJuYW1lcyI6WyJBcG9sbG9zQ29uZmlnIiwibG9hZEpzIiwiUk9DSyIsIkFQSV9VUkwiLCJBUElfVE9LRU4iLCJJTUFHRV9VUkwiLCJBdXRoIiwic2NoZW1hIiwiYXV0aFNjaGVtYSIsImRhdGFTb3VyY2UiLCJhdXRoTW9jayIsInJlc29sdmVyIiwiUXVlcnkiLCJjdXJyZW50VXNlciIsInByb2ZpbGUiLCJpZCIsImdldENvbnRleHQiLCJnZXRTY2hlbWEiLCJQZXJzb24iLCJGYW1pbHkiLCJkZXNjcmliZSIsImNvbnRleHQiLCJiZWZvcmVFYWNoIiwiZmV0Y2giLCJyZXNldE1vY2tzIiwibW9ja1JvY2tEYXRhU291cmNlQVBJIiwicGVvcGxlU2NoZW1hIiwibWVkaWFTY2hlbWEiLCJ0b2tlbiIsImNvb2tpZSIsInNlc3Npb25JZCIsInJlcSIsImhlYWRlcnMiLCJhdXRob3JpemF0aW9uIiwiaXQiLCJxdWVyeSIsInJvb3RWYWx1ZSIsInJlc3VsdCIsImV4cGVjdCIsInRvTWF0Y2hTbmFwc2hvdCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFLQTs7QUFDQTs7QUFFQTs7OztBQURBO0FBR0FBLGdCQUFjQyxNQUFkLENBQXFCO0FBQ25CQyxFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsT0FBTyxFQUFFLHNDQURMO0FBRUpDLElBQUFBLFNBQVMsRUFBRSxpQkFGUDtBQUdKQyxJQUFBQSxTQUFTLEVBQUU7QUFIUDtBQURhLENBQXJCOztBQVFBLE1BQU1DLElBQUksR0FBRztBQUNYQyxFQUFBQSxNQUFNLEVBQUVDLHNCQURHO0FBRVhDLEVBQUFBLFVBQVUsRUFBRUMsaUJBRkQ7QUFHWEMsRUFBQUEsUUFBUSxFQUFFO0FBQUVDLElBQUFBLEtBQUssRUFBRTtBQUFFQyxNQUFBQSxXQUFXLEVBQUUsT0FBTztBQUFFQyxRQUFBQSxPQUFPLEVBQUU7QUFBRUMsVUFBQUEsRUFBRSxFQUFFO0FBQU47QUFBWCxPQUFQO0FBQWY7QUFBVDtBQUhDLENBQWI7QUFNQSxNQUFNO0FBQUVDLEVBQUFBLFVBQUY7QUFBY0MsRUFBQUE7QUFBZCxJQUE0QixrQ0FBa0I7QUFBRUMsRUFBQUEsTUFBTSxFQUFOQSxRQUFGO0FBQVVDLEVBQUFBLE1BQU0sRUFBTkEsUUFBVjtBQUFrQmIsRUFBQUE7QUFBbEIsQ0FBbEIsQ0FBbEM7QUFFQWMsUUFBUSxDQUFDLFFBQUQsRUFBVyxNQUFNO0FBQ3ZCLE1BQUliLE1BQUo7QUFDQSxNQUFJYyxPQUFKO0FBQ0FDLEVBQUFBLFVBQVUsQ0FBQyxNQUFNO0FBQ2ZDLDJCQUFNQyxVQUFOOztBQUNBRCwyQkFBTUUscUJBQU47O0FBQ0FsQixJQUFBQSxNQUFNLEdBQUdVLFNBQVMsQ0FBQyxDQUFDUyx3QkFBRCxFQUFlQyx1QkFBZixDQUFELENBQWxCO0FBQ0EsVUFBTUMsS0FBSyxHQUFHLDBDQUFjO0FBQzFCQyxNQUFBQSxNQUFNLEVBQUUsYUFEa0I7QUFFMUJDLE1BQUFBLFNBQVMsRUFBRTtBQUZlLEtBQWQsQ0FBZDtBQUlBVCxJQUFBQSxPQUFPLEdBQUdMLFVBQVUsQ0FBQztBQUFFZSxNQUFBQSxHQUFHLEVBQUU7QUFBRUMsUUFBQUEsT0FBTyxFQUFFO0FBQUVDLFVBQUFBLGFBQWEsRUFBRUw7QUFBakI7QUFBWDtBQUFQLEtBQUQsQ0FBcEI7QUFDRCxHQVRTLENBQVY7QUFXQU0sRUFBQUEsRUFBRSxDQUFDLDJCQUFELEVBQThCLFlBQVk7QUFDMUMsVUFBTUMsS0FBSyxHQUFJOzs7Ozs7OztLQUFmO0FBU0EsVUFBTUMsU0FBUyxHQUFHLEVBQWxCO0FBQ0EsVUFBTUMsTUFBTSxHQUFHLE1BQU0sc0JBQVE5QixNQUFSLEVBQWdCNEIsS0FBaEIsRUFBdUJDLFNBQXZCLEVBQWtDZixPQUFsQyxDQUFyQjtBQUNBaUIsSUFBQUEsTUFBTSxDQUFDRCxNQUFELENBQU4sQ0FBZUUsZUFBZjtBQUNELEdBYkMsQ0FBRjtBQWNELENBNUJPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBncmFwaHFsIH0gZnJvbSAnZ3JhcGhxbCc7XG5pbXBvcnQgeyBmZXRjaCB9IGZyb20gJ2Fwb2xsby1zZXJ2ZXItZW52JztcblxuaW1wb3J0IEFwb2xsb3NDb25maWcgZnJvbSAnQGFwb2xsb3Nwcm9qZWN0L2NvbmZpZyc7XG5pbXBvcnQgeyBnZW5lcmF0ZVRva2VuIH0gZnJvbSAnQGFwb2xsb3Nwcm9qZWN0L2RhdGEtY29ubmVjdG9yLXJvY2stYXV0aCc7XG5pbXBvcnQge1xuICBwZW9wbGVTY2hlbWEsXG4gIG1lZGlhU2NoZW1hLFxuICBhdXRoU2NoZW1hLFxufSBmcm9tICdAYXBvbGxvc3Byb2plY3QvZGF0YS1zY2hlbWEnO1xuaW1wb3J0IHsgY3JlYXRlVGVzdEhlbHBlcnMgfSBmcm9tICdAYXBvbGxvc3Byb2plY3Qvc2VydmVyLWNvcmUvbGliL3Rlc3RVdGlscyc7XG5pbXBvcnQgeyBQZXJzb24sIEZhbWlseSB9IGZyb20gJy4uLy4uJztcbi8vIHdlIGltcG9ydCB0aGUgcm9vdC1sZXZlbCBzY2hlbWEgYW5kIHJlc29sdmVyIHNvIHdlIHRlc3QgdGhlIGVudGlyZSBpbnRlZ3JhdGlvbjpcbmltcG9ydCBhdXRoTW9jayBmcm9tICcuLi8uLi9hdXRoTW9jayc7XG5cbkFwb2xsb3NDb25maWcubG9hZEpzKHtcbiAgUk9DSzoge1xuICAgIEFQSV9VUkw6ICdodHRwczovL2Fwb2xsb3Nyb2NrLm5ld3NwcmluZy5jYy9hcGknLFxuICAgIEFQSV9UT0tFTjogJ3NvbWUtcm9jay10b2tlbicsXG4gICAgSU1BR0VfVVJMOiAnaHR0cHM6Ly9hcG9sbG9zcm9jay5uZXdzcHJpbmcuY2MvR2V0SW1hZ2UuYXNoeCcsXG4gIH0sXG59KTtcblxuY29uc3QgQXV0aCA9IHtcbiAgc2NoZW1hOiBhdXRoU2NoZW1hLFxuICBkYXRhU291cmNlOiBhdXRoTW9jayxcbiAgcmVzb2x2ZXI6IHsgUXVlcnk6IHsgY3VycmVudFVzZXI6ICgpID0+ICh7IHByb2ZpbGU6IHsgaWQ6IDUxIH0gfSkgfSB9LFxufTtcblxuY29uc3QgeyBnZXRDb250ZXh0LCBnZXRTY2hlbWEgfSA9IGNyZWF0ZVRlc3RIZWxwZXJzKHsgUGVyc29uLCBGYW1pbHksIEF1dGggfSk7XG5cbmRlc2NyaWJlKCdGYW1pbHknLCAoKSA9PiB7XG4gIGxldCBzY2hlbWE7XG4gIGxldCBjb250ZXh0O1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBmZXRjaC5yZXNldE1vY2tzKCk7XG4gICAgZmV0Y2gubW9ja1JvY2tEYXRhU291cmNlQVBJKCk7XG4gICAgc2NoZW1hID0gZ2V0U2NoZW1hKFtwZW9wbGVTY2hlbWEsIG1lZGlhU2NoZW1hXSk7XG4gICAgY29uc3QgdG9rZW4gPSBnZW5lcmF0ZVRva2VuKHtcbiAgICAgIGNvb2tpZTogJ3NvbWUtY29va2llJyxcbiAgICAgIHNlc3Npb25JZDogJ3NvbWVzc2Vzc2lvbmlkJyxcbiAgICB9KTtcbiAgICBjb250ZXh0ID0gZ2V0Q29udGV4dCh7IHJlcTogeyBoZWFkZXJzOiB7IGF1dGhvcml6YXRpb246IHRva2VuIH0gfSB9KTtcbiAgfSk7XG5cbiAgaXQoXCJyZXR1cm5zIGEgdXNlcidzIGxvY2F0aW9uXCIsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBxdWVyeSA9IGBcbiAgICAgIHF1ZXJ5IHtcbiAgICAgICAgY3VycmVudFVzZXIge1xuICAgICAgICAgIHByb2ZpbGUge1xuICAgICAgICAgICAgbG9jYXRpb25cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgO1xuICAgIGNvbnN0IHJvb3RWYWx1ZSA9IHt9O1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdyYXBocWwoc2NoZW1hLCBxdWVyeSwgcm9vdFZhbHVlLCBjb250ZXh0KTtcbiAgICBleHBlY3QocmVzdWx0KS50b01hdGNoU25hcHNob3QoKTtcbiAgfSk7XG59KTtcbiJdfQ==
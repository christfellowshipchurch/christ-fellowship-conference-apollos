"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.config = config;
exports.default = withCloudinary;
Object.defineProperty(exports, "cloudinary", {
  enumerable: true,
  get: function () {
    return _cloudinary.default;
  }
});

var _cloudinary = _interopRequireDefault(require("cloudinary"));

var _config = _interopRequireDefault(require("@apollosproject/config"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const {
  CLOUDINARY
} = _config.default; // Cloudinary picks up settings from `env`,
// no way to pass straight into config if using `CLOUDINARY_URL format`
// Exposed as Utiliy function to reset config (mostly used in tests)

function config() {
  process.env.CLOUDINARY_URL = CLOUDINARY.URL;

  _cloudinary.default.config(true);

  _cloudinary.default.config({
    private_cdn: false,
    secure: true
  });
} // we always want to setup the config on boot.


config();

const cleanUrl = url => url.replace(/:(443|80)/, '');

function withCloudinary(_url = '', options) {
  const url = cleanUrl(_url); // If we call this function twice, only the first transform will be applied

  if (url.startsWith('https://res.cloudinary.com')) {
    return url;
  }

  if (CLOUDINARY.URL) {
    return _cloudinary.default.url(url, {
      type: 'fetch',
      fetch_format: 'auto',
      width: '1600',
      crop: 'limit',
      ...options
    });
  }

  return url;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbG91ZGluYXJ5LmpzIl0sIm5hbWVzIjpbIkNMT1VESU5BUlkiLCJBcG9sbG9zQ29uZmlnIiwiY29uZmlnIiwicHJvY2VzcyIsImVudiIsIkNMT1VESU5BUllfVVJMIiwiVVJMIiwiY2xvdWRpbmFyeSIsInByaXZhdGVfY2RuIiwic2VjdXJlIiwiY2xlYW5VcmwiLCJ1cmwiLCJyZXBsYWNlIiwid2l0aENsb3VkaW5hcnkiLCJfdXJsIiwib3B0aW9ucyIsInN0YXJ0c1dpdGgiLCJ0eXBlIiwiZmV0Y2hfZm9ybWF0Iiwid2lkdGgiLCJjcm9wIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOzs7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQWlCQyxlQUF2QixDLENBQ0E7QUFDQTtBQUNBOztBQUNPLFNBQVNDLE1BQVQsR0FBa0I7QUFDdkJDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxjQUFaLEdBQTZCTCxVQUFVLENBQUNNLEdBQXhDOztBQUNBQyxzQkFBV0wsTUFBWCxDQUFrQixJQUFsQjs7QUFDQUssc0JBQVdMLE1BQVgsQ0FBa0I7QUFDaEJNLElBQUFBLFdBQVcsRUFBRSxLQURHO0FBRWhCQyxJQUFBQSxNQUFNLEVBQUU7QUFGUSxHQUFsQjtBQUlELEMsQ0FDRDs7O0FBQ0FQLE1BQU07O0FBRU4sTUFBTVEsUUFBUSxHQUFJQyxHQUFELElBQVNBLEdBQUcsQ0FBQ0MsT0FBSixDQUFZLFdBQVosRUFBeUIsRUFBekIsQ0FBMUI7O0FBRWUsU0FBU0MsY0FBVCxDQUF3QkMsSUFBSSxHQUFHLEVBQS9CLEVBQW1DQyxPQUFuQyxFQUE0QztBQUN6RCxRQUFNSixHQUFHLEdBQUdELFFBQVEsQ0FBQ0ksSUFBRCxDQUFwQixDQUR5RCxDQUV6RDs7QUFDQSxNQUFJSCxHQUFHLENBQUNLLFVBQUosQ0FBZSw0QkFBZixDQUFKLEVBQWtEO0FBQ2hELFdBQU9MLEdBQVA7QUFDRDs7QUFDRCxNQUFJWCxVQUFVLENBQUNNLEdBQWYsRUFBb0I7QUFDbEIsV0FBT0Msb0JBQVdJLEdBQVgsQ0FBZUEsR0FBZixFQUFvQjtBQUN6Qk0sTUFBQUEsSUFBSSxFQUFFLE9BRG1CO0FBRXpCQyxNQUFBQSxZQUFZLEVBQUUsTUFGVztBQUd6QkMsTUFBQUEsS0FBSyxFQUFFLE1BSGtCO0FBSXpCQyxNQUFBQSxJQUFJLEVBQUUsT0FKbUI7QUFLekIsU0FBR0w7QUFMc0IsS0FBcEIsQ0FBUDtBQU9EOztBQUNELFNBQU9KLEdBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbG91ZGluYXJ5IGZyb20gJ2Nsb3VkaW5hcnknO1xuaW1wb3J0IEFwb2xsb3NDb25maWcgZnJvbSAnQGFwb2xsb3Nwcm9qZWN0L2NvbmZpZyc7XG5cbmNvbnN0IHsgQ0xPVURJTkFSWSB9ID0gQXBvbGxvc0NvbmZpZztcbi8vIENsb3VkaW5hcnkgcGlja3MgdXAgc2V0dGluZ3MgZnJvbSBgZW52YCxcbi8vIG5vIHdheSB0byBwYXNzIHN0cmFpZ2h0IGludG8gY29uZmlnIGlmIHVzaW5nIGBDTE9VRElOQVJZX1VSTCBmb3JtYXRgXG4vLyBFeHBvc2VkIGFzIFV0aWxpeSBmdW5jdGlvbiB0byByZXNldCBjb25maWcgKG1vc3RseSB1c2VkIGluIHRlc3RzKVxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZygpIHtcbiAgcHJvY2Vzcy5lbnYuQ0xPVURJTkFSWV9VUkwgPSBDTE9VRElOQVJZLlVSTDtcbiAgY2xvdWRpbmFyeS5jb25maWcodHJ1ZSk7XG4gIGNsb3VkaW5hcnkuY29uZmlnKHtcbiAgICBwcml2YXRlX2NkbjogZmFsc2UsXG4gICAgc2VjdXJlOiB0cnVlLFxuICB9KTtcbn1cbi8vIHdlIGFsd2F5cyB3YW50IHRvIHNldHVwIHRoZSBjb25maWcgb24gYm9vdC5cbmNvbmZpZygpO1xuXG5jb25zdCBjbGVhblVybCA9ICh1cmwpID0+IHVybC5yZXBsYWNlKC86KDQ0M3w4MCkvLCAnJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdpdGhDbG91ZGluYXJ5KF91cmwgPSAnJywgb3B0aW9ucykge1xuICBjb25zdCB1cmwgPSBjbGVhblVybChfdXJsKTtcbiAgLy8gSWYgd2UgY2FsbCB0aGlzIGZ1bmN0aW9uIHR3aWNlLCBvbmx5IHRoZSBmaXJzdCB0cmFuc2Zvcm0gd2lsbCBiZSBhcHBsaWVkXG4gIGlmICh1cmwuc3RhcnRzV2l0aCgnaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20nKSkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgaWYgKENMT1VESU5BUlkuVVJMKSB7XG4gICAgcmV0dXJuIGNsb3VkaW5hcnkudXJsKHVybCwge1xuICAgICAgdHlwZTogJ2ZldGNoJyxcbiAgICAgIGZldGNoX2Zvcm1hdDogJ2F1dG8nLFxuICAgICAgd2lkdGg6ICcxNjAwJyxcbiAgICAgIGNyb3A6ICdsaW1pdCcsXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH0pO1xuICB9XG4gIHJldHVybiB1cmw7XG59XG5cbmV4cG9ydCB7IGNsb3VkaW5hcnkgfTtcbiJdfQ==
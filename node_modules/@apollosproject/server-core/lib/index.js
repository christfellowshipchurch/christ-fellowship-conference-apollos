"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "createGlobalId", {
  enumerable: true,
  get: function () {
    return Node.createGlobalId;
  }
});
Object.defineProperty(exports, "parseGlobalId", {
  enumerable: true,
  get: function () {
    return Node.parseGlobalId;
  }
});
Object.defineProperty(exports, "withEdgePagination", {
  enumerable: true,
  get: function () {
    return _utils.withEdgePagination;
  }
});
exports.createApolloServerConfig = exports.createContext = exports.createDataSources = exports.createResolvers = exports.createSchema = void 0;

var _lodash = require("lodash");

var _graphqlTag = _interopRequireDefault(require("graphql-tag"));

var Node = _interopRequireWildcard(require("./node"));

var Pagination = _interopRequireWildcard(require("./pagination"));

var Media = _interopRequireWildcard(require("./media"));

var _utils = require("./pagination/utils");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Types that all apollos-church servers will use.
const builtInData = {
  Node,
  Pagination,
  Media
};

const createSchema = data => [_graphqlTag.default`
    type Query {
      _placeholder: Boolean # needed, empty schema defs aren't supported
    }

    type Mutation {
      _placeholder: Boolean # needed, empty schema defs aren't supported
    }
  `, ...(0, _lodash.compact)((0, _lodash.values)({ ...builtInData,
  ...data
}).map(datum => datum.schema))];

exports.createSchema = createSchema;

const createResolvers = data => (0, _lodash.merge)(...(0, _lodash.compact)((0, _lodash.values)({ ...builtInData,
  ...data
}).map(datum => datum.resolver)));

exports.createResolvers = createResolvers;

const getDataSources = data => (0, _lodash.mapValues)({ ...builtInData,
  ...data
}, datum => datum.dataSource);

const getModels = data => (0, _lodash.mapValues)({ ...builtInData,
  ...data
}, datum => datum.model);

const getContextMiddlewares = data => (0, _lodash.compact)((0, _lodash.values)({ ...builtInData,
  ...data
}).map(datum => datum.contextMiddleware));

const createDataSources = data => {
  const dataSources = getDataSources(data);
  return () => {
    const sources = {};
    Object.keys(dataSources).forEach(dataSourceName => {
      if (dataSources[dataSourceName]) {
        sources[dataSourceName] = new dataSources[dataSourceName]();
      }
    });
    return sources;
  };
};

exports.createDataSources = createDataSources;

const createContext = data => ({
  req = {}
} = {}) => {
  const initiatedModels = {}; // For all non-datasource connectors. Right now only `Node`.

  const models = getModels(data);
  let context = {
    models: initiatedModels
  };
  Object.keys(models).forEach(modelName => {
    if (models[modelName]) {
      initiatedModels[modelName] = new models[modelName](context);
    }
  });
  const contextMiddleware = getContextMiddlewares(data);
  contextMiddleware.forEach(middleware => {
    context = middleware({
      req,
      context
    });
  });
  return context;
};

exports.createContext = createContext;

const createApolloServerConfig = data => {
  const context = createContext(data);
  const dataSources = createDataSources(data);
  const schema = createSchema(data);
  const resolvers = createResolvers(data);
  return {
    context,
    dataSources,
    schema,
    resolvers
  };
};

exports.createApolloServerConfig = createApolloServerConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJidWlsdEluRGF0YSIsIk5vZGUiLCJQYWdpbmF0aW9uIiwiTWVkaWEiLCJjcmVhdGVTY2hlbWEiLCJkYXRhIiwiZ3FsIiwibWFwIiwiZGF0dW0iLCJzY2hlbWEiLCJjcmVhdGVSZXNvbHZlcnMiLCJyZXNvbHZlciIsImdldERhdGFTb3VyY2VzIiwiZGF0YVNvdXJjZSIsImdldE1vZGVscyIsIm1vZGVsIiwiZ2V0Q29udGV4dE1pZGRsZXdhcmVzIiwiY29udGV4dE1pZGRsZXdhcmUiLCJjcmVhdGVEYXRhU291cmNlcyIsImRhdGFTb3VyY2VzIiwic291cmNlcyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiZGF0YVNvdXJjZU5hbWUiLCJjcmVhdGVDb250ZXh0IiwicmVxIiwiaW5pdGlhdGVkTW9kZWxzIiwibW9kZWxzIiwiY29udGV4dCIsIm1vZGVsTmFtZSIsIm1pZGRsZXdhcmUiLCJjcmVhdGVBcG9sbG9TZXJ2ZXJDb25maWciLCJyZXNvbHZlcnMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQTs7Ozs7O0FBRUE7QUFDQSxNQUFNQSxXQUFXLEdBQUc7QUFBRUMsRUFBQUEsSUFBRjtBQUFRQyxFQUFBQSxVQUFSO0FBQW9CQyxFQUFBQTtBQUFwQixDQUFwQjs7QUFFTyxNQUFNQyxZQUFZLEdBQUlDLElBQUQsSUFBVSxDQUNwQ0MsbUJBQUk7Ozs7Ozs7O0dBRGdDLEVBVXBDLEdBQUcscUJBQVEsb0JBQU8sRUFBRSxHQUFHTixXQUFMO0FBQWtCLEtBQUdLO0FBQXJCLENBQVAsRUFBb0NFLEdBQXBDLENBQXlDQyxLQUFELElBQVdBLEtBQUssQ0FBQ0MsTUFBekQsQ0FBUixDQVZpQyxDQUEvQjs7OztBQWFBLE1BQU1DLGVBQWUsR0FBSUwsSUFBRCxJQUM3QixtQkFDRSxHQUFHLHFCQUNELG9CQUFPLEVBQUUsR0FBR0wsV0FB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c291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tcGFjdCwgbWFwVmFsdWVzLCBtZXJnZSwgdmFsdWVzIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBncWwgZnJvbSAnZ3JhcGhxbC10YWcnO1xuaW1wb3J0ICogYXMgTm9kZSBmcm9tICcuL25vZGUnO1xuaW1wb3J0ICogYXMgUGFnaW5hdGlvbiBmcm9tICcuL3BhZ2luYXRpb24nO1xuaW1wb3J0ICogYXMgTWVkaWEgZnJvbSAnLi9tZWRpYSc7XG5cbmV4cG9ydCB7IGNyZWF0ZUdsb2JhbElkLCBwYXJzZUdsb2JhbElkIH0gZnJvbSAnLi9ub2RlJztcbmV4cG9ydCB7IHdpdGhFZGdlUGFnaW5hdGlvbiB9IGZyb20gJy4vcGFnaW5hdGlvbi91dGlscyc7XG5cbi8vIFR5cGVzIHRoYXQgYWxsIGFwb2xsb3MtY2h1cmNoIHNlcnZlcnMgd2lsbCB1c2UuXG5jb25zdCBidWlsdEluRGF0YSA9IHsgTm9kZSwgUGFnaW5hdGlvbiwgTWVkaWEgfTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVNjaGVtYSA9IChkYXRhKSA9PiBbXG4gIGdxbGBcbiAgICB0eXBlIFF1ZXJ5IHtcbiAgICAgIF9wbGFjZWhvbGRlcjogQm9vbGVhbiAjIG5lZWRlZCwgZW1wdHkgc2NoZW1hIGRlZnMgYXJlbid0IHN1cHBvcnRlZFxuICAgIH1cblxuICAgIHR5cGUgTXV0YXRpb24ge1xuICAgICAgX3BsYWNlaG9sZGVyOiBCb29sZWFuICMgbmVlZGVkLCBlbXB0eSBzY2hlbWEgZGVmcyBhcmVuJ3Qgc3VwcG9ydGVkXG4gICAgfVxuICBgLFxuICAuLi5jb21wYWN0KHZhbHVlcyh7IC4uLmJ1aWx0SW5EYXRhLCAuLi5kYXRhIH0pLm1hcCgoZGF0dW0pID0+IGRhdHVtLnNjaGVtYSkpLFxuXTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVJlc29sdmVycyA9IChkYXRhKSA9PlxuICBtZXJnZShcbiAgICAuLi5jb21wYWN0KFxuICAgICAgdmFsdWVzKHsgLi4uYnVpbHRJbkRhdGEsIC4uLmRhdGEgfSkubWFwKChkYXR1bSkgPT4gZGF0dW0ucmVzb2x2ZXIpXG4gICAgKVxuICApO1xuXG5jb25zdCBnZXREYXRhU291cmNlcyA9IChkYXRhKSA9PlxuICBtYXBWYWx1ZXMoeyAuLi5idWlsdEluRGF0YSwgLi4uZGF0YSB9LCAoZGF0dW0pID0+IGRhdHVtLmRhdGFTb3VyY2UpO1xuXG5jb25zdCBnZXRNb2RlbHMgPSAoZGF0YSkgPT5cbiAgbWFwVmFsdWVzKHsgLi4uYnVpbHRJbkRhdGEsIC4uLmRhdGEgfSwgKGRhdHVtKSA9PiBkYXR1bS5tb2RlbCk7XG5cbmNvbnN0IGdldENvbnRleHRNaWRkbGV3YXJlcyA9IChkYXRhKSA9PlxuICBjb21wYWN0KFxuICAgIHZhbHVlcyh7IC4uLmJ1aWx0SW5EYXRhLCAuLi5kYXRhIH0pLm1hcCgoZGF0dW0pID0+IGRhdHVtLmNvbnRleHRNaWRkbGV3YXJlKVxuICApO1xuXG5leHBvcnQgY29uc3QgY3JlYXRlRGF0YVNvdXJjZXMgPSAoZGF0YSkgPT4ge1xuICBjb25zdCBkYXRhU291cmNlcyA9IGdldERhdGFTb3VyY2VzKGRhdGEpO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGNvbnN0IHNvdXJjZXMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhkYXRhU291cmNlcykuZm9yRWFjaCgoZGF0YVNvdXJjZU5hbWUpID0+IHtcbiAgICAgIGlmIChkYXRhU291cmNlc1tkYXRhU291cmNlTmFtZV0pIHtcbiAgICAgICAgc291cmNlc1tkYXRhU291cmNlTmFtZV0gPSBuZXcgZGF0YVNvdXJjZXNbZGF0YVNvdXJjZU5hbWVdKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNvdXJjZXM7XG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlQ29udGV4dCA9IChkYXRhKSA9PiAoeyByZXEgPSB7fSB9ID0ge30pID0+IHtcbiAgY29uc3QgaW5pdGlhdGVkTW9kZWxzID0ge307XG5cbiAgLy8gRm9yIGFsbCBub24tZGF0YXNvdXJjZSBjb25uZWN0b3JzLiBSaWdodCBub3cgb25seSBgTm9kZWAuXG4gIGNvbnN0IG1vZGVscyA9IGdldE1vZGVscyhkYXRhKTtcbiAgbGV0IGNvbnRleHQgPSB7XG4gICAgbW9kZWxzOiBpbml0aWF0ZWRNb2RlbHMsXG4gIH07XG5cbiAgT2JqZWN0LmtleXMobW9kZWxzKS5mb3JFYWNoKChtb2RlbE5hbWUpID0+IHtcbiAgICBpZiAobW9kZWxzW21vZGVsTmFtZV0pIHtcbiAgICAgIGluaXRpYXRlZE1vZGVsc1ttb2RlbE5hbWVdID0gbmV3IG1vZGVsc1ttb2RlbE5hbWVdKGNvbnRleHQpO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgY29udGV4dE1pZGRsZXdhcmUgPSBnZXRDb250ZXh0TWlkZGxld2FyZXMoZGF0YSk7XG4gIGNvbnRleHRNaWRkbGV3YXJlLmZvckVhY2goKG1pZGRsZXdhcmUpID0+IHtcbiAgICBjb250ZXh0ID0gbWlkZGxld2FyZSh7IHJlcSwgY29udGV4dCB9KTtcbiAgfSk7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUFwb2xsb1NlcnZlckNvbmZpZyA9IChkYXRhKSA9PiB7XG4gIGNvbnN0IGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KGRhdGEpO1xuICBjb25zdCBkYXRhU291cmNlcyA9IGNyZWF0ZURhdGFTb3VyY2VzKGRhdGEpO1xuICBjb25zdCBzY2hlbWEgPSBjcmVhdGVTY2hlbWEoZGF0YSk7XG4gIGNvbnN0IHJlc29sdmVycyA9IGNyZWF0ZVJlc29sdmVycyhkYXRhKTtcbiAgcmV0dXJuIHsgY29udGV4dCwgZGF0YVNvdXJjZXMsIHNjaGVtYSwgcmVzb2x2ZXJzIH07XG59O1xuIl19
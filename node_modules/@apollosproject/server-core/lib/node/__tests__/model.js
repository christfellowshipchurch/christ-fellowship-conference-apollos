"use strict";

var _casual = _interopRequireDefault(require("casual"));

var _model = _interopRequireWildcard(require("../model"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Node', () => {
  it('`createGlobalId` should take two arguments and return a string', () => {
    const id = _casual.default.word;
    const type = _casual.default.word;
    expect(typeof (0, _model.createGlobalId)(id, type)).toEqual('string');
  });
  it('`createGlobalId` should be decodeable by `parseGlobalId`', () => {
    const id = _casual.default.word;
    const __type = _casual.default.word;
    const globalId = (0, _model.createGlobalId)(id, __type);
    expect((0, _model.parseGlobalId)(globalId)).toEqual({
      __type,
      id
    });
  });
  it('`parseGlobalId` should take a global id and return the type and id', () => {
    const id = _casual.default.word;
    const __type = _casual.default.word;
    const globalId = (0, _model.createGlobalId)(id, __type);
    expect((0, _model.parseGlobalId)(globalId)).toEqual({
      __type,
      id
    });
  });
  it('`parseGlobalId` should throw an error if ID is invalid', () => {
    expect(() => (0, _model.parseGlobalId)('blah-blah')).toThrow();
  });
  it('Node class should parse an encoded id to get the type to resolve', async () => {
    const id = _casual.default.word;
    const __type = 'Test';
    const globalId = (0, _model.createGlobalId)(id, __type);
    const dataSources = {
      Test: {
        getFromId(_id) {
          expect(_id).toEqual(id);
          return {};
        }

      }
    };
    const node = new _model.default();
    node.get(globalId, dataSources);
  });
  it("Node class should throw error if it can't find a matching model", async () => {
    const id = _casual.default.word;
    const __type = 'NoModel';
    const globalId = (0, _model.createGlobalId)(id, __type);
    const node = new _model.default({});
    expect(node.get(globalId)).rejects.toBeDefined();
  });
  it("Node class doesn't assign __type if model returns falsey", async () => {
    const id = _casual.default.word;
    const __type = 'Test';
    const globalId = (0, _model.createGlobalId)(id, __type);
    const dataSources = {
      Test: {
        getFromId() {
          return '';
        }

      }
    };
    const node = new _model.default(dataSources);
    const record = node.get(globalId);
    expect(record).not.toHaveProperty('__type');
  });
  it('Node class should return data from the models `getFromId` method', async () => {
    const id = _casual.default.word;
    const __type = 'Test';
    const globalId = (0, _model.createGlobalId)(id, __type);
    const data = {
      test: _casual.default.word
    };
    const dataSources = {
      Test: {
        getFromId() {
          return Promise.resolve(data);
        }

      }
    };
    const node = new _model.default();
    const result = await node.get(globalId, dataSources);
    expect(result.test).toEqual(data.test);
  });
  it('Node class should attach the __type to the resulting data', async () => {
    const id = _casual.default.word;
    const __type = 'Test';
    const globalId = (0, _model.createGlobalId)(id, __type);
    const data = {
      test: _casual.default.word
    };
    const dataSources = {
      Test: {
        getFromId() {
          return Promise.resolve(data);
        }

      }
    };
    const node = new _model.default();
    const result = await node.get(globalId, dataSources);
    expect(result.__type).toEqual(__type);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
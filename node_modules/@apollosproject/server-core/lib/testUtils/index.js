"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestHelpers = void 0;

var _apolloServer = require("apollo-server");

var _dataSchema = require("@apollosproject/data-schema");

var _apolloServerCaching = require("apollo-server-caching");

var _ = require("..");

/* eslint-disable import/prefer-default-export */
const createTestHelpers = models => {
  const serverConfig = (0, _.createApolloServerConfig)(models);

  const getContext = req => {
    const testContext = serverConfig.context(req);
    const testDataSources = serverConfig.dataSources(); // Apollo Server does this internally.

    Object.values(testDataSources).forEach(dataSource => {
      if (dataSource.initialize) {
        dataSource.initialize({
          context: testContext,
          cache: _apolloServerCaching.KeyValueCache
        });
      }
    });
    testContext.dataSources = testDataSources;
    return testContext;
  };

  const getSchema = (schemas = []) => (0, _apolloServer.makeExecutableSchema)({
    typeDefs: [...serverConfig.schema, ...schemas, _dataSchema.testSchema],
    resolvers: serverConfig.resolvers,
    resolverValidationOptions: {
      requireResolversForResolveType: false
    }
  });

  return {
    getSchema,
    getContext
  };
};

exports.createTestHelpers = createTestHelpers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0VXRpbHMvaW5kZXguanMiXSwibmFtZXMiOlsiY3JlYXRlVGVzdEhlbHBlcnMiLCJtb2RlbHMiLCJzZXJ2ZXJDb25maWciLCJnZXRDb250ZXh0IiwicmVxIiwidGVzdENvbnRleHQiLCJjb250ZXh0IiwidGVzdERhdGFTb3VyY2VzIiwiZGF0YVNvdXJjZXMiLCJPYmplY3QiLCJ2YWx1ZXMiLCJmb3JFYWNoIiwiZGF0YVNvdXJjZSIsImluaXRpYWxpemUiLCJjYWNoZSIsIktleVZhbHVlQ2FjaGUiLCJnZXRTY2hlbWEiLCJzY2hlbWFzIiwidHlwZURlZnMiLCJzY2hlbWEiLCJ0ZXN0U2NoZW1hIiwicmVzb2x2ZXJzIiwicmVzb2x2ZXJWYWxpZGF0aW9uT3B0aW9ucyIsInJlcXVpcmVSZXNvbHZlcnNGb3JSZXNvbHZlVHlwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUpBO0FBTU8sTUFBTUEsaUJBQWlCLEdBQUlDLE1BQUQsSUFBWTtBQUMzQyxRQUFNQyxZQUFZLEdBQUcsZ0NBQXlCRCxNQUF6QixDQUFyQjs7QUFDQSxRQUFNRSxVQUFVLEdBQUlDLEdBQUQsSUFBUztBQUMxQixVQUFNQyxXQUFXLEdBQUdILFlBQVksQ0FBQ0ksT0FBYixDQUFxQkYsR0FBckIsQ0FBcEI7QUFDQSxVQUFNRyxlQUFlLEdBQUdMLFlBQVksQ0FBQ00sV0FBYixFQUF4QixDQUYwQixDQUcxQjs7QUFDQUMsSUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWNILGVBQWQsRUFBK0JJLE9BQS9CLENBQXdDQyxVQUFELElBQWdCO0FBQ3JELFVBQUlBLFVBQVUsQ0FBQ0MsVUFBZixFQUEyQjtBQUN6QkQsUUFBQUEsVUFBVSxDQUFDQyxVQUFYLENBQXNCO0FBQUVQLFVBQUFBLE9BQU8sRUFBRUQsV0FBWDtBQUF3QlMsVUFBQUEsS0FBSyxFQUFFQztBQUEvQixTQUF0QjtBQUNEO0FBQ0YsS0FKRDtBQUtBVixJQUFBQSxXQUFXLENBQUNHLFdBQVosR0FBMEJELGVBQTFCO0FBQ0EsV0FBT0YsV0FBUDtBQUNELEdBWEQ7O0FBWUEsUUFBTVcsU0FBUyxHQUFHLENBQUNDLE9BQU8sR0FBRyxFQUFYLEtBQ2hCLHdDQUFxQjtBQUNuQkMsSUFBQUEsUUFBUSxFQUFFLENBQUMsR0FBR2hCLFlBQVksQ0FBQ2lCLE1BQWpCLEVBQXlCLEdBQUdGLE9BQTVCLEVBQXFDRyxzQkFBckMsQ0FEUztBQUVuQkMsSUFBQUEsU0FBUyxFQUFFbkIsWUFBWSxDQUFDbUIsU0FGTDtBQUduQkMsSUFBQUEseUJBQXlCLEVBQUU7QUFDekJDLE1BQUFBLDhCQUE4QixFQUFFO0FBRFA7QUFIUixHQUFyQixDQURGOztBQVNBLFNBQU87QUFBRVAsSUFBQUEsU0FBRjtBQUFhYixJQUFBQTtBQUFiLEdBQVA7QUFDRCxDQXhCTSIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnQgKi9cbmltcG9ydCB7IG1ha2VFeGVjdXRhYmxlU2NoZW1hIH0gZnJvbSAnYXBvbGxvLXNlcnZlcic7XG5pbXBvcnQgeyB0ZXN0U2NoZW1hIH0gZnJvbSAnQGFwb2xsb3Nwcm9qZWN0L2RhdGEtc2NoZW1hJztcbmltcG9ydCB7IEtleVZhbHVlQ2FjaGUgfSBmcm9tICdhcG9sbG8tc2VydmVyLWNhY2hpbmcnO1xuaW1wb3J0IHsgY3JlYXRlQXBvbGxvU2VydmVyQ29uZmlnIH0gZnJvbSAnLi4nO1xuXG5leHBvcnQgY29uc3QgY3JlYXRlVGVzdEhlbHBlcnMgPSAobW9kZWxzKSA9PiB7XG4gIGNvbnN0IHNlcnZlckNvbmZpZyA9IGNyZWF0ZUFwb2xsb1NlcnZlckNvbmZpZyhtb2RlbHMpO1xuICBjb25zdCBnZXRDb250ZXh0ID0gKHJlcSkgPT4ge1xuICAgIGNvbnN0IHRlc3RDb250ZXh0ID0gc2VydmVyQ29uZmlnLmNvbnRleHQocmVxKTtcbiAgICBjb25zdCB0ZXN0RGF0YVNvdXJjZXMgPSBzZXJ2ZXJDb25maWcuZGF0YVNvdXJjZXMoKTtcbiAgICAvLyBBcG9sbG8gU2VydmVyIGRvZXMgdGhpcyBpbnRlcm5hbGx5LlxuICAgIE9iamVjdC52YWx1ZXModGVzdERhdGFTb3VyY2VzKS5mb3JFYWNoKChkYXRhU291cmNlKSA9PiB7XG4gICAgICBpZiAoZGF0YVNvdXJjZS5pbml0aWFsaXplKSB7XG4gICAgICAgIGRhdGFTb3VyY2UuaW5pdGlhbGl6ZSh7IGNvbnRleHQ6IHRlc3RDb250ZXh0LCBjYWNoZTogS2V5VmFsdWVDYWNoZSB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0ZXN0Q29udGV4dC5kYXRhU291cmNlcyA9IHRlc3REYXRhU291cmNlcztcbiAgICByZXR1cm4gdGVzdENvbnRleHQ7XG4gIH07XG4gIGNvbnN0IGdldFNjaGVtYSA9IChzY2hlbWFzID0gW10pID0+XG4gICAgbWFrZUV4ZWN1dGFibGVTY2hlbWEoe1xuICAgICAgdHlwZURlZnM6IFsuLi5zZXJ2ZXJDb25maWcuc2NoZW1hLCAuLi5zY2hlbWFzLCB0ZXN0U2NoZW1hXSxcbiAgICAgIHJlc29sdmVyczogc2VydmVyQ29uZmlnLnJlc29sdmVycyxcbiAgICAgIHJlc29sdmVyVmFsaWRhdGlvbk9wdGlvbnM6IHtcbiAgICAgICAgcmVxdWlyZVJlc29sdmVyc0ZvclJlc29sdmVUeXBlOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgcmV0dXJuIHsgZ2V0U2NoZW1hLCBnZXRDb250ZXh0IH07XG59O1xuIl19